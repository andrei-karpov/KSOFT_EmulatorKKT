
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	
	ТипОборудованияИспользуемый = "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудованияИспользуемый = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		Попытка
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудованияИспользуемый) 
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка обращения к драйверу.'"));
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = 3002;
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	// Получаем ревизию интерфейса драйвера.
	РевизияИнтерфейса = ОбъектДрайвера.ПолучитьРевизиюИнтерфейса();
	// Получаем описание драйвера.
	ОписаниеДрайвера = "";
	ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
	
	ОписаниеДрайвераПараметры = МенеджерОборудованияВызовСервера.ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
	НаименованиеДрайвера      = ОписаниеДрайвераПараметры.НаименованиеДрайвера;
	ОписаниеДрайвера          = ОписаниеДрайвераПараметры.ОписаниеДрайвера;
	ТипОборудования           = ОписаниеДрайвераПараметры.ТипОборудования;
	ИнтеграционныйКомпонент   = ОписаниеДрайвераПараметры.ИнтеграционныйКомпонент;
	ОсновнойДрайверУстановлен = ОписаниеДрайвераПараметры.ОсновнойДрайверУстановлен;
	URLЗагрузкиДрайвера       = ОписаниеДрайвераПараметры.URLЗагрузкиДрайвера;
	
	ПараметрыПодключения.Вставить("РевизияИнтерфейса", РевизияИнтерфейса);
	
	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);
	
	Попытка
		Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Подключить>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ Ответ Тогда
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
	Иначе
		ВремВыходныеПараметры = Новый Массив();
		Если ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВремВыходныеПараметры) Тогда
			ВремШиринаСтроки = ВремВыходныеПараметры[0];
			ШиринаСтроки = ?(ВремШиринаСтроки <> Неопределено И ВремШиринаСтроки > 0, ВремШиринаСтроки, 32);
		КонецЕсли;
		ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства);
	
	Возврат Результат;
	
КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ВыполнитьДополнительноеДействие" ИЛИ Команда = "DoAdditionalAction" Тогда
		ИмяДействия = ВходныеПараметры[0];
		Результат = ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера.
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ УСТРОЙСТВАМИ 
	
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		Результат = ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Открыть смену
	ИначеЕсли Команда = "OpenShift" ИЛИ Команда = "ОткрытьСмену" Тогда
		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Закрыть кассовую смену
	ИначеЕсли Команда = "CloseShift" ИЛИ Команда = "ЗакрытьСмену" Тогда
		Результат = ЗакрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Отчет о текущем состоянии расчетов
	ИначеЕсли Команда = "ReportCurrentStatusOfSettlements" ИЛИ Команда = "ОтчетОТекущемСостоянииРасчетов" Тогда
		Результат = ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Сформировать отчет без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		Результат = ОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека внесения/выемки.
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Фискализация чека.
	ИначеЕсли Команда = "CheckFiscalization" ИЛИ Команда = "ФискализацияЧека" Тогда
		Результат = ФискализацияЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Фискализация чека.
	ИначеЕсли Команда = "CheckFiscalizationPacket" ИЛИ Команда = "ФискализацияЧекаПакетом" Тогда
		Результат = ФискализацияЧекаПакетом(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека коррекции
	ИначеЕсли Команда = "PrintReceiptCorrection" ИЛИ Команда = "ПечатьЧекаКоррекции" Тогда
		Результат = ПечатьЧекаКоррекции(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		СтрокаТекста = ВходныеПараметры[0];
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintTextDocument" ИЛИ Команда = "ПечатьТекстовогоДокумента"  Тогда
		Результат = НачатьПечатьТекстовыхДокументов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Получить текущее состояние 
	ИначеЕсли Команда = "GetCurrentStatus" ИЛИ Команда = "ПолучитьТекущееСостояние" Тогда
		Результат = ПолучитьТекущееСостояние(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Получить параметры ККТ
	ИначеЕсли Команда = "GetDataKKT" ИЛИ Команда = "ПолучитьПараметрыККТ" Тогда
		Результат = ПолучитьПараметрыККТ(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Отчет о текущем состоянии расчетов
	ИначеЕсли Команда = "OperationFN" ИЛИ Команда = "ОперацияФН" Тогда
		Результат = ОперацияФискальногоНакопителя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВходныеПараметры, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Размер пакета в элементах передаваемой информации в драйвер.
//
Функция РазмерПакетаПоУмолчанию() Экспорт
	
	РазмерПакета = 200;
	Возврат РазмерПакета;
	
КонецФункции
 
#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляФискальныхУстройств

// Функция осуществляет открытие денежного ящика.
//
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьДенежныйЯщик>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция получает ширину строки в символах.
//  
Функция ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт 
	
	Результат = Истина;
	ШиринаСтроки = 0;
	 
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьШиринуСтроки(ПараметрыПодключения.ИДУстройства, ШиринаСтроки);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(ШиринаСтроки);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьШиринуСтроки>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет открытие смены.
//
// Параметры:
// 	Параметры - Структура - где:
// 	*Идентификатор - СправочникСсылка.ПодключаемоеОборудование - .
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = "";
	ОписаниеТеста = "";
	АктивированДемоРежим = "";
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
			
	// Получить параметры ККТ при открытии смены.
	ПараметрыККТ = "";
	Попытка
		Результат = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
		Если Результат Тогда
			ПараметрыККТ = МенеджерОборудованияВызовСервера.ПараметрыИзXMLПакетаККТ(ПараметрыККТ, Параметры.Идентификатор, РевизияИнтерфейса);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
	Попытка
		Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
		Если Результат Тогда
			ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
			НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
			НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
		КонецЕсли;
		
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСмену>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ТекущаяДата());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
		ВыходныеПараметры.Добавить(ПараметрыККТ);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет закрыть смены.
//
Функция ЗакрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = "";
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
		
	ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
	Попытка
		Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
		Если Результат Тогда
			ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
			НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
			НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСмену>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(1); // 1 - Закрыта - Состояние смены  
		ВыходныеПараметры.Добавить(ТекущаяДата());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет формирование отчета о текущем состоянии расчетов.
//
Функция ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = "";
	
	Попытка
		РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
		ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
		
		Результат = ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
		Если Результат Тогда
			ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
			НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
			НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
		КонецЕсли;
		
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ТекущаяДата());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет формирование отчет без гашения.
//
Функция ОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	
	Попытка
		ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
		Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства, ПараметрыОперации);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ТекущаяДата());
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция осуществляет внесение или выемку суммы.
//
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	ДатаСеанса = ТекущаяДата();
	НомерСмены     = 0;
	НомерДокумента = 0;
	ТипИнкассации  = ?(ВходныеПараметры.Свойство("ТипИнкассации"), ВходныеПараметры.ТипИнкассации, 0);  
	Сумма          = ?(ВходныеПараметры.Свойство("Сумма"), ВходныеПараметры.Сумма, 0);  
	
	ПараметрыФискализации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеИнкасации(ВходныеПараметры, ПараметрыПодключения);
	Если НЕ ПараметрыФискализации.Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ТекстОшибки);
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML,
		?(ТипИнкассации = 1, Сумма, -Сумма));
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если Результат Тогда
		ПараметрыФискализации.ДатаВремяЧека = ДатаСеанса;
		МенеджерОборудованияВызовСервера.ОбработатьДанныеИнкасации(ПараметрыФискализации);
	КонецЕсли;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ДатаСеанса);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции    

// Функция осуществляет фискализацию чека пакетом.
//
Функция ФискализацияЧекаПакетом(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	Результат = Ложь;
	
	РевизияИнтерфейса = ПараметрыПодключения.РевизияИнтерфейса;
	ДанныеЧека = ВходныеПараметры;
	Электронно = Ложь;
	НомерСмены = 0;
	НомерЧека  = 0;
	ФискальныйПризнак  = "";
	АдресСайтаПроверки = "";
	ПараметрыДокумента = "";
	
	Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, Электронно, ДанныеЧека, ПараметрыДокумента); 
	Если Результат Тогда  
		РезультатФискализации = МенеджерОборудованияКлиентСервер.ПараметрыФискализацииЧека();
		РезультатФискализации.РезультатОперацииXML = ПараметрыДокумента;
		МенеджерОборудованияВызовСервера.ЗаполнитьРезультатыФискализацияЧекаИзXMLПакета(РезультатФискализации);
		НомерСмены = РезультатФискализации.НомерСменыККТ;
		НомерЧека  = РезультатФискализации.НомерЧекаККТ;
		ДатаСеанса = РезультатФискализации.ДатаВремяЧека;
		ФискальныйПризнак  = РезультатФискализации.ФискальныйПризнак;
		АдресСайтаПроверки = РезультатФискализации.АдресСайтаПроверки;
	КонецЕсли;
	
	Если Результат Тогда  
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерЧека);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ТекущаяДата());
		ВыходныеПараметры.Добавить(ФискальныйПризнак);
		ВыходныеПараметры.Добавить(АдресСайтаПроверки);
		ВыходныеПараметры.Добавить(Неопределено);
		ВыходныеПараметры.Добавить(ДанныеЧека);
	Иначе
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции 

// Функция осуществляет фискализацию чека.
//
Функция ФискализацияЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
	
	ДатаСеанса = ТекущаяДата();
			
	ПараметрыФискализации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеФискализацииЧека(ВходныеПараметры, ПараметрыПодключения);
	Если НЕ ПараметрыФискализации.Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ТекстОшибки);
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыФискализации.СформироватьЧекКоррекции Тогда
		Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.РезультатОперацииXML);
		ПараметрыФискализации.ДатаВремяЧека = ДатаСеанса;
	Иначе
		Попытка
			Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.Электронно, ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.РезультатОперацииXML); 
			ПараметрыФискализации.ДатаВремяЧека = ДатаСеанса;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.СформироватьЧек>.'") + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если Результат Тогда  
		МенеджерОборудованияВызовСервера.ОбработатьДанныеФискализацииЧека(ПараметрыФискализации);
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерСменыККТ);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерЧекаККТ);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ДатаВремяЧека);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ФискальныйПризнак);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.АдресСайтаПроверки);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.РегистрационныйНомерККТ);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ДанныеЧекаXML);
		ВыходныеПараметры.Добавить(ПараметрыФискализации);
		Если (ПараметрыФискализации.Отправляет1СSMS Или ПараметрыФискализации.Отправляет1СEmail) Тогда
			ПокупательEmail = ?(ВходныеПараметры.Отправляет1СEmail, ВходныеПараметры.ПокупательEmail, Неопределено);
			ПокупательНомер = ?(ВходныеПараметры.Отправляет1СSMS  , ВходныеПараметры.ПокупательНомер, Неопределено);
			ВходныеПараметры.НомерСмены = ПараметрыФискализации.НомерСменыККТ;
			ВходныеПараметры.НомерЧека  = ПараметрыФискализации.НомерЧекаККТ;
			ВходныеПараметры.Вставить("ФискальныйПризнак"      , ПараметрыФискализации.ФискальныйПризнак);
			ВходныеПараметры.Вставить("АдресСайтаПроверки"     , ПараметрыФискализации.АдресСайтаПроверки);
			ВходныеПараметры.Вставить("РегистрационныйНомерККТ", ПараметрыФискализации.РегистрационныйНомерККТ);
			МенеджерОборудованияКлиентПереопределяемый.НачатьОтправкуЭлектронногоЧека(ВходныеПараметры, ПараметрыФискализации.ТекстСообщения, ПокупательEmail, ПокупательНомер);
		КонецЕсли
	Иначе
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Осуществляет печать чека коррекции.
//
Функция ПечатьЧекаКоррекции(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;
	
	ДатаСеанса = ТекущаяДата();
		
	ПараметрыФискализации = МенеджерОборудованияВызовСервера.ПодготовитьДанныеЧекаКоррекции(ВходныеПараметры, ПараметрыПодключения);
	Если НЕ ПараметрыФискализации.Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ТекстОшибки);
		Результат = Ложь;  
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Если ПараметрыФискализации.НеприменениеККТ Тогда // Сценарий 1 - непримененин ККТ.
			Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML,  ПараметрыФискализации.РезультатОперацииXML); 
		Иначе  // Сценарий 2 - исправление нарушений применения ККТ.
			ПараметрыФискализацииСторно = ПараметрыФискализации.ЧекКоррекцииСторно;
			Если ПараметрыФискализации.ВерсияФФДККТ11 Тогда
				// Шаг 1 - Формируем чек ККТ с обратным признаком расчета.
				Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.РезультатОперацииXML);
				// Шаг 2 - Формируем чек ККТ с корректными данными.
				Если Результат Тогда
					Результат = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.РезультатОперацииXML);
				КонецЕсли;
			Иначе
				// Шаг 1 - Формируем чек ККТ с обратным признаком расчета.
				Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.Электронно, 
				ПараметрыФискализацииСторно.ДанныеЧекаXML, ПараметрыФискализацииСторно.РезультатОперацииXML);
				// Шаг 2 - Формируем чек ККТ с корректными данными.
				Если Результат Тогда
					Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, ПараметрыФискализацииСторно.Электронно,
					ПараметрыФискализации.ДанныеЧекаXML, ПараметрыФискализации.РезультатОперацииXML);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка формирования коррекции на ККТ.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Если Результат Тогда  
		МенеджерОборудованияВызовСервера.ОбработатьДанныеФискализацииЧекаКоррекции(ПараметрыФискализации);
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерСменыККТ);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.НомерЧекаККТ);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ДатаВремяЧека);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ФискальныйПризнак);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.АдресСайтаПроверки);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.РегистрационныйНомерККТ);
		ВыходныеПараметры.Добавить(ПараметрыФискализации.ДанныеЧекаXML);
		ВыходныеПараметры.Добавить(ПараметрыФискализации);
	Иначе
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;  
	
КонецФункции

// Осуществляет печать текстового документа.
//
Функция НачатьПечатьТекстовыхДокументов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;  
	СтрокаТекста = "";
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	
	ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	ОбщиеПараметры = ВходныеПараметры[0];
	
	ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекстовогоДокумента(ОбщиеПараметры, ВыходныеПараметры, ШиринаСтроки, РевизияИнтерфейса);
	Попытка
		Для Каждого ТекстПечати Из ДанныеЧека Цикл
			Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
			Если НЕ Результат Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			Иначе
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(ТекущаяДата());
			КонецЕсли;
		КонецЦикла;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Осуществляет печать текста.
//
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;  
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
		
	ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекста(СтрокаТекста, РевизияИнтерфейса);
	Попытка
		Для Каждого ТекстПечати Из ДанныеЧека Цикл
			Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
			Если НЕ Результат Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			Иначе
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(ТекущаяДата());
			КонецЕсли;
		КонецЦикла;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие смены.
//
Функция ПолучитьТекущееСостояние(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Ложь;
		
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ПараметрыСостояния = "";
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	
	Попытка
		ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры, РевизияИнтерфейса);
		Результат = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
	
		Если НЕ Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			
			ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, РевизияИнтерфейса);
			НомерСмены     = ФискальныеДанныеСтруктура.НомерСменыККТ;
			НомерДокумента = ФискальныеДанныеСтруктура.НомерЧекаККТ;
			СтатусСмены    = ФискальныеДанныеСтруктура.СтатусСмены;
				
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерДокумента);
			ВыходныеПараметры.Добавить(СтатусСмены); 
			ВыходныеПараметры.Добавить(ТекущаяДата());
			ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
			ПараметрыРегистрации = ПараметрыПодключения.ПараметрыРегистрации;
			ЗаводскойНомерФН = ?(ПараметрыРегистрации.Свойство("ЗаводскойНомерФН"), ПараметрыРегистрации.ЗаводскойНомерФН, "");
			ВыходныеПараметры.Добавить(ЗаводскойНомерФН); 
		КонецЕсли;
	Исключение
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьТекущееСостояние>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет открытие смены.
//
// Параметры:
// 	Параметры - Структура - где:
// 	*Идентификатор - СправочникСсылка.ПодключаемоеОборудование - .
// Возвращаемое значение:
// 	Булево - результат выполнения операции.
Функция ПолучитьПараметрыККТ(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	
	ПараметрыККТ = "";
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры = МенеджерОборудованияВызовСервера.ПараметрыИзXMLПакетаККТ(ПараметрыККТ, Параметры.Идентификатор, РевизияИнтерфейса);
			ВыходныеПараметры.Вставить("РевизияИнтерфейса", ПараметрыПодключения.РевизияИнтерфейса);
		КонецЕсли;
		
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет операцию с фискальным накопителем.
//
Функция ОперацияФискальногоНакопителя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ПараметрыФискализации, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	ТипОперации = ПараметрыФискализации[0].ТипОперации;
	
	РевизияИнтерфейса  = ПараметрыПодключения.РевизияИнтерфейса;
	ПараметрыФискализацииXML = МенеджерОборудованияВызовСервера.СформироватьТаблицуПараметровДляОперацииФН(ПараметрыФискализации[0], РевизияИнтерфейса);
	Попытка
		Результат = ОбъектДрайвера.ОперацияФН(ПараметрыПодключения.ИДУстройства, ТипОперации, ПараметрыФискализацииXML);
		Если НЕ Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ТекущаяДата());
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОперацияФН>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщиеДляВсехТиповДрайверов

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат            = Истина;
	РезультатТеста       = "";
	АктивированДемоРежим = "";
	
	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);
	
	Попытка
		Ответ = ОбъектДрайвера.ТестУстройства(РезультатТеста, АктивированДемоРежим);
	
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
		КонецЕсли;
		ВыходныеПараметры.Добавить(РезультатТеста);
		ВыходныеПараметры.Добавить(АктивированДемоРежим);
	
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет выполнение дополнительного действия для устройства.
//
Функция ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры)
	
	Результат  = Истина;
	
	УстановитьПараметрыДрайвера(ОбъектДрайвера, Параметры);
	
	Попытка
		Ответ = ОбъектДрайвера.ВыполнитьДополнительноеДействие(ИмяДействия);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВыполнитьДополнительноеДействие>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	Попытка
		// Получаем описание драйвера.
		ОписаниеДрайвера = "";
		ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
		ОписаниеДрайвераПараметры = МенеджерОборудованияВызовСервера.ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
		ВерсияДрайвера = ОписаниеДрайвераПараметры.ВерсияДрайвера;
		ВыходныеПараметры[1] = ВерсияДрайвера;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает описание установленного драйвера.
//
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = 3002;
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудования = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудования) 
	КонецЕсли;
	
	Попытка
		ОписаниеДрайвера = "";
		ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
		ОписаниеДрайвераПараметры = МенеджерОборудованияВызовСервера.ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
		ВерсияДрайвера            = ОписаниеДрайвераПараметры.ВерсияДрайвера;
		НаименованиеДрайвера      = ОписаниеДрайвераПараметры.НаименованиеДрайвера;
		ОписаниеДрайвера          = ОписаниеДрайвераПараметры.ОписаниеДрайвера;
		ТипОборудования           = ОписаниеДрайвераПараметры.ТипОборудования;
		ИнтеграционныйКомпонент   = ОписаниеДрайвераПараметры.ИнтеграционныйКомпонент;
		ОсновнойДрайверУстановлен = ОписаниеДрайвераПараметры.ОсновнойДрайверУстановлен;
		URLЗагрузкиДрайвера       = ОписаниеДрайвераПараметры.URLЗагрузкиДрайвера;
		// Получаем ревизию интерфейса драйвера.
		РевизияИнтерфейса = ОбъектДрайвера.ПолучитьРевизиюИнтерфейса();
	Исключение
		Результат = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Если Результат Тогда
		ВыходныеПараметры[1] = ВерсияДрайвера;
		ВыходныеПараметры[2] = НаименованиеДрайвера;
		ВыходныеПараметры[3] = ОписаниеДрайвера;
		ВыходныеПараметры[4] = ТипОборудования;
		ВыходныеПараметры[5] = РевизияИнтерфейса;
		ВыходныеПараметры[6] = ИнтеграционныйКомпонент;
		ВыходныеПараметры[7] = ОсновнойДрайверУстановлен;
		ВыходныеПараметры[8] = URLЗагрузкиДрайвера;
		
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьПараметры(ПараметрыДрайвера);
		ВыходныеПараметры[9] = ПараметрыДрайвера;
		// Получаем дополнительные действия.
		ОбъектДрайвера.ПолучитьДополнительныеДействия(ДополнительныеДействия);
		ВыходныеПараметры[10] = ДополнительныеДействия;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Процедура для устранения ошибок, когда неправильно передаются параметры оборудования,
//В частности такая ситуация возникает для операции "ВыполнитьДополнительныеДействия"
Процедура УстановитьПараметрыДрайвера(ОбъектДрайвера, ПараметрыДрайвера)
	
	Для Каждого Параметр Из ПараметрыДрайвера Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("Структура") Тогда
			Для Каждого ЭлементПараметра Из Параметр.Значение Цикл
				Если Лев(ЭлементПараметра.Ключ, 2) = "P_" Тогда
					ЗначениеПараметра = ЭлементПараметра.Значение;
					ИмяПараметра = Сред(ЭлементПараметра.Ключ, 3);
					ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
				КонецЕсли;
			КонецЦикла; 	
		Иначе
			Если Лев(Параметр.Ключ, 2) = "P_" Тогда
				ЗначениеПараметра = Параметр.Значение;
				ИмяПараметра = Сред(Параметр.Ключ, 3);
				ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры
 
#КонецОбласти

