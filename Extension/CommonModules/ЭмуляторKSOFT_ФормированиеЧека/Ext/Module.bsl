Процедура СохранитьВременноеЗначениеОборудования(ИмяПараметра, ЗначениеПараметра)
	ЭмуляторKSOFT_ОбщегоНазначения.СохранитьВременноеЗначениеОборудования(ИмяПараметра, ЗначениеПараметра);
КонецПроцедуры
 
Функция ПолучитьВременноеЗначениеОборудования(ИмяПараметра)
	Возврат ЭмуляторKSOFT_ОбщегоНазначения.ПолучитьВременноеЗначениеОборудования(ИмяПараметра);
КонецФункции

Функция ТекстовыйДокументЧек(ДанныеКассира, ТипОперации, Сумма, ИдентификаторОборудования) Экспорт
	
	ДанныеОборудования = ТекущиеПараметрыККТ(ИдентификаторОборудования);
	
	ПараметрыЧека = Новый Структура;
	ПараметрыЧека.Вставить("Организация", ДанныеОборудования.CompanyName);
	ПараметрыЧека.Вставить("АдресРасчетов", ДанныеОборудования.SaleAddress);
	ПараметрыЧека.Вставить("МестоРасчетов", ДанныеОборудования.SaleLocation);
	ПараметрыЧека.Вставить("ИНН", ДанныеОборудования.INN);
	ПараметрыЧека.Вставить("РНККТ", ДанныеОборудования.KKTNumber);
	Если ДанныеКассира <> Неопределено Тогда
		ПараметрыЧека.Вставить("Кассир", ДанныеКассира.name);
		ПараметрыЧека.Вставить("КассирИНН", ДанныеКассира.vatin);		
	КонецЕсли; 
	ПараметрыЧека.Вставить("Операция", ТипОперации);
	ПараметрыЧека.Вставить("Сумма", Сумма);
	
	ДокументЧекККМ = Новый ТекстовыйДокумент;
	МакетЧекаККМ      = ПолучитьОбщийМакет("ЭмуляторKSOFT_ЧекПокупателя");
	ДокументЧекККМ.Вывести(МакетЧекаККМ.ПолучитьОбласть("Шапка"));
	
	ОбластьШапкаЧека  = МакетЧекаККМ.ПолучитьОбласть("СлужебнаяИнформация");
	ОбластьШапкаЧека.Параметры.Заполнить(ПараметрыЧека);
	ДокументЧекККМ.Вывести(ОбластьШапкаЧека);
	
	Если ПараметрыЧека.Свойство("Кассир") Тогда
		ОбластьКассир = МакетЧекаККМ.ПолучитьОбласть("Кассир");
		ОбластьКассир.Параметры.Заполнить(ПараметрыЧека);
		ДокументЧекККМ.Вывести(ОбластьКассир);	
	КонецЕсли; 
	
	Если ПараметрыЧека.Свойство("Сумма") И ЗначениеЗаполнено(ПараметрыЧека.Сумма) Тогда
		ОбластьСумма = МакетЧекаККМ.ПолучитьОбласть("Сумма");
		ОбластьСумма.Параметры.Сумма = ПараметрыЧека.Сумма;
		ДокументЧекККМ.Вывести(ОбластьСумма);
	КонецЕсли; 
	ДокументЧекККМ.Вывести(МакетЧекаККМ.ПолучитьОбласть("Подвал"));
	
	Возврат ДокументЧекККМ;
КонецФункции
 
Функция ТекущиеПараметрыККТ(ИдентификаторОборудования) Экспорт
	Если НЕ 1 = 1 Тогда
		Сч = "Сервис";
	КонецЕсли; 
	ДанныеОборудования = ДанныеПараметрыККТ();	
	СохраненныеПараметрыККТ = СохраненныеПараметрыККТ(ИдентификаторОборудования);
	Если СохраненныеПараметрыККТ <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеОборудования, СохраненныеПараметрыККТ);		
	КонецЕсли; 
	Возврат ДанныеОборудования;	
КонецФункции

Функция ПараметрыЧекаПоДанным1С(ПараметрыЧека1С, ДанныеТекущейСмены, ФискальныеДанные, ИдентификаторОборудования)
	
	ПараметрыЧека = Новый Структура("Фискальный,Кассир,ТипОперации,НомерЧека,КассирИНН,
	|ЗаводскойНомерККТ,РегистрационныйНомерККТ,ЗаводскойНомерФН,СНО,
	|МестоРасчетов,Смена,ФНД,ФП,Организация,АдресРасчетов, 
	|ОФД,Итого,ДатаЧека,ДополнительныйРеквизит,КартинкаQR,Всего,Скидка");
	
	ПараметрыЧека.Фискальный = Истина;
	ПараметрыЧека.Кассир 	= ПараметрыЧека1С.CashierName;
	ПараметрыЧека.КассирИНН = ПараметрыЧека1С.CashierINN;
	ПараметрыЧека.СНО 		= ПолучитьНаименованиеСистемыНалогообложения(ПараметрыЧека1С.TaxationSystem);
	ПараметрыЧека.ТипОперации = ПолучитьПредставлениеТипаДляЧека(ПараметрыЧека1С.OperationType);
	
	Если ПараметрыЧека1С.Свойство("CorrectionData") И ЗначениеЗаполнено(ПараметрыЧека1С.CorrectionData) Тогда
		
		ДанныеКоррекции = ПараметрыДанныеКоррекции();
		ДанныеКоррекции.ТипКоррекции 		= ПараметрыЧека1С.CorrectionData.Type;
		ДанныеКоррекции.ОписаниеКоррекции 	= ПараметрыЧека1С.CorrectionData.Description;
		ДанныеКоррекции.ДатаКоррекции 		= ПараметрыЧека1С.CorrectionData.Date;
		ДанныеКоррекции.НомерПредписания 	= ПараметрыЧека1С.CorrectionData.Number;
		ПараметрыЧека.Вставить("ДанныеКоррекции", ДанныеКоррекции);
	
	КонецЕсли; 
		
	Если ПараметрыЧека1С.AgentType <> Неопределено Тогда
		ПараметрыЧека.Вставить("Агент", ПолучитьПолноеНаименованиеАгента(ПараметрыЧека1С.AgentType));
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыЧека1С.CustomerInfo) Тогда
		ПараметрыЧека.Вставить("Получатель", 	ПараметрыЧека1С.CustomerInfo);
		ПараметрыЧека.Вставить("ПолучательИНН", ПараметрыЧека1С.CustomerINN);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЧека1С.AdditionalAttribute) Тогда
		ПараметрыЧека.ДополнительныйРеквизит = ПараметрыЧека1С.AdditionalAttribute;
	КонецЕсли; 

	Если ПараметрыЧека1С.Свойство("UserAttribute") И ЗначениеЗаполнено(ПараметрыЧека1С.UserAttribute) Тогда
		ПараметрыЧека.Вставить("ДополнительныйРеквизитПользователя", Новый Структура("ДопРеквизитПользователя, ДополнительныйРеквизит", 
																	ПараметрыЧека1С.UserAttribute.Name, ПараметрыЧека1С.UserAttribute.Value));
	КонецЕсли; 
	
	Если ПараметрыЧека1С.Свойство("VendorData") И СтруктураЗаполнена(ПараметрыЧека1С.VendorData) Тогда
		ДанныеПоставщика = ПараметрыДанныеПоставщика();
		ДанныеПоставщика.Телефон = ПараметрыЧека1С.VendorData.VendorPhone;
		ДанныеПоставщика.Наименование = ПараметрыЧека1С.VendorData.VendorName; // Строка - Наименование поставщика.
		ДанныеПоставщика.ИНН = ПараметрыЧека1С.VendorData.VendorINN;
		ПараметрыЧека.Вставить("ДанныеПоставщика", ДанныеПоставщика);
	КонецЕсли;
	
	ПараметрыЧека.МестоРасчетов = ПараметрыЧека1С.SaleLocation;
	ПараметрыЧека.АдресРасчетов = ПараметрыЧека1С.SaleAddress;
	
	Если ПараметрыЧека1С.Свойство("AgentData") И СтруктураЗаполнена(ПараметрыЧека1С.AgentData) Тогда
		ПараметрыЧека.Вставить("ДанныеАгента", ПоляАгента(ПараметрыЧека1С.AgentData));		
	КонецЕсли;
	
	ПараметрыЧека.Всего = 0;
	ПараметрыЧека.Скидка = 0;
	ПараметрыЧека.Итого = 0;
	
	ПараметрыЧека.Вставить("СписокНДС", Новый Массив);
	ПараметрыЧека.Вставить("ТаблицаОплат", Новый Массив);
	ПараметрыЧека.Вставить("ПозицииЧека", Новый Массив);

	ТаблицаНДС = Новый ТаблицаЗначений;
	ТаблицаНДС.Колонки.Добавить("ПроцентНДС", Новый ОписаниеТипов("Строка"));
	ТаблицаНДС.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
	
	СуммаЧека = 0;
	Для Каждого ДанныеСтрокиЧека Из ПараметрыЧека1С.Positions Цикл
		Если ДанныеСтрокиЧека.Свойство("FiscalString") Тогда
			
			ПараметрыФискальнойСтроки = Новый Структура(
			"ФискальнаяСтрока, Цена, Количество, Сумма, ПроцентНДС, 
			|СуммаНДС, НомерТаможеннойДекларации, КодСтраныПроисхожденияТовара, 
			|ПризнакПредметаРасчета, ПризнакСпособаРасчета, Секция, ЭтоМаркировочныйТовар,ДополнительныйРеквизит,СуммаАкциза");
			
			ПараметрыФискальнойСтроки.ФискальнаяСтрока 			= ДанныеСтрокиЧека.Name;
			ПараметрыФискальнойСтроки.ДополнительныйРеквизит 	= ДанныеСтрокиЧека.AdditionalAttribute;
			ПараметрыФискальнойСтроки.СуммаАкциза 				= ДанныеСтрокиЧека.ExciseAmount;
			ПараметрыФискальнойСтроки.Цена 						= ФорматЧисла(ДанныеСтрокиЧека.PriceWithDiscount);
			ПараметрыФискальнойСтроки.Количество 				= ДанныеСтрокиЧека.Quantity;
			ПараметрыФискальнойСтроки.Сумма 					= ФорматЧисла(ДанныеСтрокиЧека.AmountWithDiscount);
			ПараметрыФискальнойСтроки.ПроцентНДС				= ПолучитьНаименованиеПроцентаНДСПоСтавке(ДанныеСтрокиЧека.VATRate);
			ПараметрыФискальнойСтроки.СуммаНДС					= ФорматЧисла(ДанныеСтрокиЧека.VATAmount);
			ПараметрыФискальнойСтроки.НомерТаможеннойДекларации	= ДанныеСтрокиЧека.CustomsDeclaration;	
			ПараметрыФискальнойСтроки.КодСтраныПроисхожденияТовара = ДанныеСтрокиЧека.CountryOfOrigin;	
			ПараметрыФискальнойСтроки.ПризнакПредметаРасчета = ПолучитьНаименованиеПризнакаПредметаРасчета(ДанныеСтрокиЧека.CalculationSubject);
			ПараметрыФискальнойСтроки.ПризнакСпособаРасчета	= ПолучитьНаименованиеПризнакаСпособаРасчета(ДанныеСтрокиЧека.PaymentMethod);
			ПараметрыФискальнойСтроки.Секция = Формат(ДанныеСтрокиЧека.Department, "ЧДЦ=0; ЧН=0; ЧГ=");
			
			Если ДанныеСтрокиЧека.Свойство("VendorData") И СтруктураЗаполнена(ДанныеСтрокиЧека.VendorData) Тогда
				ДанныеПоставщика = ПараметрыДанныеПоставщика();
				ДанныеПоставщика.Телефон = ПараметрыЧека1С.VendorData.VendorPhone;
				ДанныеПоставщика.Наименование = ПараметрыЧека1С.VendorData.VendorName; // Строка - Наименование поставщика.
				ДанныеПоставщика.ИНН = ПараметрыЧека1С.VendorData.VendorINN;
				ПараметрыФискальнойСтроки.Вставить("ДанныеПоставщика", ДанныеПоставщика);
			КонецЕсли;

			Если ДанныеСтрокиЧека.CalculationAgent <> Неопределено Тогда
				ПараметрыФискальнойСтроки.Вставить("Агент", ПолучитьПолноеНаименованиеАгента(ДанныеСтрокиЧека.CalculationAgent));
			КонецЕсли; 
			
			Если ДанныеСтрокиЧека.Свойство("AgentData") И СтруктураЗаполнена(ДанныеСтрокиЧека.AgentData) Тогда		
				ПараметрыФискальнойСтроки.Вставить("ДанныеАгента", ПоляАгента(ДанныеСтрокиЧека.AgentData));
			КонецЕсли;
			Если ДанныеСтрокиЧека.Свойство("GoodCodeData") И ЗначениеЗаполнено(ДанныеСтрокиЧека.GoodCodeData) Тогда
				Если ДанныеСтрокиЧека.GoodCodeData.MarkingCode = "AAA=" Тогда
					ПараметрыФискальнойСтроки.ЭтоМаркировочныйТовар = Ложь;
				Иначе
					ПараметрыФискальнойСтроки.ЭтоМаркировочныйТовар = ЗначениеЗаполнено(ДанныеСтрокиЧека.GoodCodeData.MarkingCode);					
				КонецЕсли; 		
			Иначе
				ПараметрыФискальнойСтроки.ЭтоМаркировочныйТовар = Ложь;
			КонецЕсли; 
			//TODO: Добавить поддержку полей
			//MeasurementUnit	
			
			ПараметрыЧека.ПозицииЧека.Добавить(ПараметрыФискальнойСтроки);
			
			ПараметрыЧека.Итого = ПараметрыЧека.Итого + ДанныеСтрокиЧека.AmountWithDiscount;
			ПараметрыЧека.Всего = ПараметрыЧека.Всего + ДанныеСтрокиЧека.AmountWithDiscount + ДанныеСтрокиЧека.DiscountAmount;
			ПараметрыЧека.Скидка = ПараметрыЧека.Скидка + ДанныеСтрокиЧека.DiscountAmount;

			НоваяСтрокаНДС 					= ТаблицаНДС.Добавить();
			НоваяСтрокаНДС.ПроцентНДС 		= ПараметрыФискальнойСтроки.ПроцентНДС;
			НоваяСтрокаНДС.СуммаНДС 		= ДанныеСтрокиЧека.VATAmount;

		ИначеЕсли ДанныеСтрокиЧека.Свойство("TextString") Тогда
			
			ПараметрыТекстовойСтроки = ПараметрыТекстовойСтрокиЧека(ДанныеСтрокиЧека.Text);
			ПараметрыЧека.ПозицииЧека.Добавить(ПараметрыТекстовойСтроки);
			
		ИначеЕсли ДанныеСтрокиЧека.Свойство("Barcode") Тогда 
			
			ПараметрыШтрихкода = ПараметрыШтрихкодаПоУмолчанию();
			ПараметрыШтрихкода.Ширина = 200;
			ПараметрыШтрихкода.Высота = 50;
			ПараметрыШтрихкода.Штрихкод =  ДанныеСтрокиЧека.Value;
			ПараметрыШтрихкода.УровеньКоррекцииQR = 3;
			ПараметрыШтрихкода.ТипКода = ПолучитьКодШтрихКодаПоИмени(ДанныеСтрокиЧека.Type);
			ПараметрыШтрихкода.УбратьЛишнийФон = Истина;
			ПараметрыШтрихкода.ОтображатьТекст = Ложь;
			
			КартинкаШтрихкода = КартинкаШтрихкода(ПараметрыШтрихкода);
			
			Если КартинкаШтрихкода = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ПараметрыШтрихкодаСтроки = Новый Структура("Штрихкод, Картинка");	
			ПараметрыШтрихкодаСтроки.Картинка = КартинкаШтрихкода;
			ПараметрыЧека.ПозицииЧека.Добавить(ПараметрыШтрихкодаСтроки);
			
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаОплат = ПолучитьТаблицуПечатиПоТипамОплат(ПараметрыЧека1С.Payments, ПараметрыЧека.Итого);
	
	Для Каждого СтрокаОплаты Из ТаблицаОплат Цикл
		ПараметрыЧека.ТаблицаОплат.Добавить(Новый Структура("Оплата, Сумма", СтрокаОплаты.Наименование, СтрокаОплаты.Сумма));
	КонецЦикла; 

	ПараметрыЧека.Итого = ФорматЧисла(ПараметрыЧека.Итого);
	ПараметрыЧека.Всего = ФорматЧисла(ПараметрыЧека.Всего);
	ПараметрыЧека.Скидка = ФорматЧисла(ПараметрыЧека.Скидка);
	
	ТаблицаНДС.Свернуть("ПроцентНДС", "СуммаНДС");
	Для Каждого СтрокаНДС Из ТаблицаНДС Цикл
		ПараметрыЧека.СписокНДС.Добавить(Новый Структура("ПроцентНДС, СуммаНДС", СтрокаНДС.ПроцентНДС, СтрокаНДС.СуммаНДС));
	КонецЦикла; 
	
	ТекущиеПараметрыККТ = ТекущиеПараметрыККТ(ИдентификаторОборудования);
	ПараметрыЧека.РегистрационныйНомерККТ = ТекущиеПараметрыККТ.KKTNumber;
	ПараметрыЧека.ЗаводскойНомерФН = ТекущиеПараметрыККТ.FNSerialNumber;
	ПараметрыЧека.ЗаводскойНомерККТ = ТекущиеПараметрыККТ.KKTSerialNumber;
		
	ПараметрыЧека.Организация = ТекущиеПараметрыККТ.CompanyName;
	Если НЕ ЗначениеЗаполнено(ТекущиеПараметрыККТ.OFDCompany) Тогда
		ПараметрыЧека.ОФД = "ofd.ru";
	Иначе
		ПараметрыЧека.ОФД = ТекущиеПараметрыККТ.OFDCompany;
	КонецЕсли;
	
	//Инициализация фискальных параметров чека
	ПараметрыЧека.ФП		= ФискальныеДанные.ФП;
	ПараметрыЧека.ФНД		= ФискальныеДанные.ФНД;
	ПараметрыЧека.НомерЧека	= ДанныеТекущейСмены.ShiftClosingCheckNumber;
	ПараметрыЧека.Смена 	= ЭмуляторKSOFT_ОбщегоНазначения.ФорматЧислаЗаданногоРазмера(ДанныеТекущейСмены.ShiftNumber, 4);
	ПараметрыЧека.ДатаЧека 	= Формат(ФискальныеДанные.ДатаВремяЧека, "ДФ='dd.MM.yyyy   HH:mm'");	
	
	ТекстQRКода = ПолучитьТекстQRКода(ФискальныеДанные.ДатаВремяЧека, ПараметрыЧека.Итого, 
										ПараметрыЧека.ЗаводскойНомерФН, ПараметрыЧека.ФНД, 
										ПараметрыЧека.ФП, ПараметрыЧека1С.OperationType);	
	
	ПараметрыШтрихкода = ПараметрыШтрихкодаПоУмолчанию();
	ПараметрыШтрихкода.Ширина = 300;
	ПараметрыШтрихкода.Высота = 300;
	ПараметрыШтрихкода.Штрихкод = ТекстQRКода;
	ПараметрыШтрихкода.УровеньКоррекцииQR = 3;
	ПараметрыШтрихкода.ТипКода = 16;
	ПараметрыШтрихкода.УбратьЛишнийФон = Истина;
	ПараметрыШтрихкода.ОтображатьТекст = Ложь;
	
	КартинкаШтрихкода = КартинкаШтрихкода(ПараметрыШтрихкода);
		
	Если КартинкаШтрихкода <> Неопределено Тогда
		ПараметрыЧека.КартинкаQR = КартинкаШтрихкода;	
	КонецЕсли; 
	
	Возврат ПараметрыЧека;
	
КонецФункции

Функция ПолучитьПолноеНаименованиеАгента(ПризнакАгента)
	Возврат КодПолноеИмяВыборки(ПолныеДанныеАгентов()) [ПризнакАгента]; 	
КонецФункции
	
Функция ПолныеДанныеАгентов()
	
	СписокАгентов = Новый Массив;
	ЗаполнитьПараметрыЭлемента(СписокАгентов, "БанковскийПлатежныйАгент", "0", "Банковский платежный агент", "БАНКОВСКИЙ ПЛАТЕЖНЫЙ АГЕНТ");
	ЗаполнитьПараметрыЭлемента(СписокАгентов, "БанковскийПлатежныйСубагент", "1", "Банковский платежный субагент", "БАНКОВСКИЙ ПЛАТЕЖНЫЙ СУБАГЕНТ");
	ЗаполнитьПараметрыЭлемента(СписокАгентов, "ПлатежныйАгент", "2", "Платежный агент", "ПЛАТЕЖНЫЙ АГЕНТ");
	ЗаполнитьПараметрыЭлемента(СписокАгентов, "ПлатежныйСубагент", "3", "Платежный субагент", "ПЛАТЕЖНЫЙ СУБАГЕНТ");
	ЗаполнитьПараметрыЭлемента(СписокАгентов, "Поверенный", "4", "Поверенный", "ПОВЕРЕННЫЙ");
	ЗаполнитьПараметрыЭлемента(СписокАгентов, "Комиссионер", "5", "Комиссионер", "КОМИССИОНЕР");
	ЗаполнитьПараметрыЭлемента(СписокАгентов, "Агент", "6", "Агент", "АГЕНТ");
	
	Возврат СписокАгентов;
	
КонецФункции

Функция РаспечататьПредварительныйЧек(ДанныеЧекаДляПечати) Экспорт
	
	МакетНефискальногоЧека	= ПолучитьОбщийМакет("ЭмуляторKSOFT_НеФискальныйЧек");
		
	ПредварительныйЧекТД 					= Новый ТабличныйДокумент;
	ПредварительныйЧекТД.АвтоМасштаб 		= Истина;
	ПредварительныйЧекТД.ОтображатьСетку 	= Ложь;
	ПредварительныйЧекТД.Вывод 				= ИспользованиеВывода.Разрешить;	
	ПредварительныйЧекТД.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_KSOFT_ЭмуляторККТ_Чек";
	ПредварительныйЧекТД.КлючПараметровПечати = ПредварительныйЧекТД.ИмяПараметровПечати;
	
	Если ДанныеЧекаДляПечати.Фискальный Тогда
		СписокОбластей = Новый Массив;
		Если ДанныеЧекаДляПечати.ЭтоЧекКоррекции Тогда
			СписокОбластей.Добавить("ШапкаЧекКоррекции");
			Если ДанныеЧекаДляПечати.Свойство("ДанныеКоррекции")
				И СтруктураЗаполнена(ДанныеЧекаДляПечати.ДанныеКоррекции)
				Тогда
				Если ДанныеЧекаДляПечати.ДанныеКоррекции.ТипКоррекции = 0 Тогда
					СписокОбластей.Добавить("КоррекцияСамостоятельно");
				Иначе
					СписокОбластей.Добавить("КоррекцияПоПредписанию");	
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			СписокОбластей.Добавить("Шапка");
		КонецЕсли; 
				
		Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеЧекаДляПечати, "Получатель") Тогда
			СписокОбластей.Добавить("Получатель");
		КонецЕсли; 	
		
		Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеЧекаДляПечати, "Агент") Тогда
			СписокОбластей.Добавить("Агент");
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ДанныеЧекаДляПечати.ДополнительныйРеквизит) Тогда
			СписокОбластей.Добавить("ДополнительныйРеквизит");
		КонецЕсли; 
		Если ДанныеЧекаДляПечати.Свойство("ДанныеКоррекции")
			И СтруктураЗаполнена(ДанныеЧекаДляПечати.ДанныеКоррекции) Тогда
			ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, СтрСоединить(СписокОбластей, ","), ДанныеЧекаДляПечати, ДанныеЧекаДляПечати.ДанныеКоррекции);
		Иначе
			ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, СтрСоединить(СписокОбластей, ","), ДанныеЧекаДляПечати);
		КонецЕсли; 
		
		Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеЧекаДляПечати, "ДанныеАгента") Тогда
			Для Каждого ИнформацияОбАгенте Из ДанныеЧекаДляПечати.ДанныеАгента Цикл
				ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ДанныеАгента", ИнформацияОбАгенте);		
			КонецЦикла;
		КонецЕсли; 
		
		Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеЧекаДляПечати, "ДанныеПоставщика") Тогда
			ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ДанныеПоставщика", ДанныеЧекаДляПечати.ДанныеПоставщика);		
		КонецЕсли; 
		
		Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеЧекаДляПечати, "ДополнительныйРеквизитПользователя") Тогда
			ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ДополнительныйРеквизитПользователя", ДанныеЧекаДляПечати.ДополнительныйРеквизитПользователя);	
		КонецЕсли; 
		
		ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "СтрокаРазделительТонкий");	
		
		Для Каждого ДанныеПозицииЧека Из ДанныеЧекаДляПечати.ПозицииЧека Цикл
			Если ДанныеПозицииЧека.Свойство("ФискальнаяСтрока") Тогда
								
				СписокОбластей = Новый Массив;
				Если ДанныеПозицииЧека.ЭтоМаркировочныйТовар Тогда
					СписокОбластей.Добавить("ФискальнаяСтрокаМаркировка");
				Иначе
					СписокОбластей.Добавить("ФискальнаяСтрока"); 
				КонецЕсли; 
				Если ДанныеПозицииЧека.ПроцентНДС = "БЕЗ НДС" Тогда
					СписокОбластей.Добавить("ФискальнаяСтрокаБезНДС");
				Иначе
					СписокОбластей.Добавить("ФискальнаяСтрокаНДС");
				КонецЕсли; 
					
				Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеПозицииЧека, "НомерТаможеннойДекларации") Тогда
					СписокОбластей.Добавить("ГТД");
				КонецЕсли;
				
				Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеПозицииЧека, "КодСтраныПроисхожденияТовара") Тогда
					СписокОбластей.Добавить("Страна");
				КонецЕсли; 					
				
				СписокОбластей.Добавить("ПредметИСпособРасчета");
				
				Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеПозицииЧека, "СуммаАкциза") Тогда
					СписокОбластей.Добавить("Акциз");
				КонецЕсли; 	

				Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеПозицииЧека, "Агент") Тогда
					СписокОбластей.Добавить("АгентПозиции");
				КонецЕсли; 
				
				Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеПозицииЧека, "ДополнительныйРеквизит") Тогда
					СписокОбластей.Добавить("ДополнительныйРеквизитСтрокиЧека");
				КонецЕсли; 
				
				ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, СтрСоединить(СписокОбластей, ","), ДанныеПозицииЧека);
				
				Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеПозицииЧека, "ДанныеАгента") Тогда
					Для Каждого ИнформацияОбАгенте Из ДанныеПозицииЧека.ДанныеАгента Цикл
						ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ДанныеАгентаПозиции", ИнформацияОбАгенте);		
					КонецЦикла;
				КонецЕсли; 
				
				Если ЭмуляторKSOFT_ОбщегоНазначения.ПараметрСуществуетИЗаполнен(ДанныеПозицииЧека, "ДанныеПоставщика") Тогда
					ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ДанныеПоставщикаПозиции", ДанныеПозицииЧека.ДанныеПоставщика);		
				КонецЕсли; 
				
			ИначеЕсли ДанныеПозицииЧека.Свойство("ТекстоваяСтрока") Тогда
				Если ДанныеПозицииЧека.Выравнивание = "ЦЕНТР" Тогда
					ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ТекстоваяСтрокаЦентр", ДанныеПозицииЧека);
				ИначеЕсли ДанныеПозицииЧека.Выравнивание = "ПРАВО" Тогда
					ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ТекстоваяСтрокаПраво", ДанныеПозицииЧека);
				Иначе
					ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ТекстоваяСтрокаЛево", ДанныеПозицииЧека);
				КонецЕсли;  
			ИначеЕсли ДанныеПозицииЧека.Свойство("Штрихкод") Тогда 
				Если ДанныеПозицииЧека.Картинка = Неопределено Тогда
					ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ШтрихкодСтрокаОшибка");
				Иначе
					ОбластьШтрихкод = МакетНефискальногоЧека.ПолучитьОбласть("ШтрихкодСтрока");
					ВывестиКартинкуВОбласть(ОбластьШтрихкод, ДанныеПозицииЧека.Картинка);
					ЗаполнитьИВывестиОбласть(ПредварительныйЧекТД, ОбластьШтрихкод);
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла; 
		
		ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "КонецПозицийЧека,ИТОГО,Оплата", ДанныеЧекаДляПечати);
		
		Для Каждого СтруктураОплаты Из ДанныеЧекаДляПечати.ТаблицаОплат Цикл
			ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "РасшифровкаОплаты", СтруктураОплаты);	
		КонецЦикла; 
		
		Для Каждого СтруктураНДС Из ДанныеЧекаДляПечати.СписокНДС Цикл
			ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "РасшифровкаНДС", СтруктураНДС);
		КонецЦикла; 
		
		ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "Подвал", ДанныеЧекаДляПечати);
		
		Если ДанныеЧекаДляПечати.КартинкаQR = Неопределено Тогда
			ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "QRКодОшибка");
		Иначе
			ОбластьQRКода = МакетНефискальногоЧека.ПолучитьОбласть("QRКод");
			ВывестиКартинкуВОбласть(ОбластьQRКода, ДанныеЧекаДляПечати.КартинкаQR, "QRКодЧека");
			ЗаполнитьИВывестиОбласть(ПредварительныйЧекТД, ОбластьQRКода);
		КонецЕсли; 
		
	Иначе
		Для Каждого ДанныеПозицииЧека Из ДанныеЧекаДляПечати.ПозицииЧека Цикл
			Если ДанныеПозицииЧека.Свойство("ТекстоваяСтрока") Тогда
				Если ДанныеПозицииЧека.Выравнивание = "ЦЕНТР" Тогда
					ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ТекстоваяСтрокаЦентр", ДанныеПозицииЧека);
				ИначеЕсли ДанныеПозицииЧека.Выравнивание = "ПРАВО" Тогда
					ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ТекстоваяСтрокаПраво", ДанныеПозицииЧека);
				Иначе
					ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ТекстоваяСтрокаЛево", ДанныеПозицииЧека);
				КонецЕсли; 
			ИначеЕсли ДанныеПозицииЧека.Свойство("Штрихкод") Тогда 
				Если ДанныеПозицииЧека.Картинка = Неопределено Тогда
					ЗаполнитьИВывестиСписокОбластей(ПредварительныйЧекТД, МакетНефискальногоЧека, "ШтрихкодСтрокаОшибка");
				Иначе
					ОбластьШтрихкод = МакетНефискальногоЧека.ПолучитьОбласть("ШтрихкодСтрока");
					ВывестиКартинкуВОбласть(ОбластьШтрихкод, ДанныеПозицииЧека.Картинка);
					ЗаполнитьИВывестиОбласть(ПредварительныйЧекТД, ОбластьШтрихкод);
				КонецЕсли;
			КонецЕсли; 
			
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ПредварительныйЧекТД;
	
КонецФункции

Процедура ЗаполнитьИВывестиСписокОбластей(пТД, МакетОбластей, СтрокаОбластиТД, пПараметры1 = Неопределено, пПараметры2 = Неопределено)
	СписокОбластейТД = СтрРазделить(СтрокаОбластиТД, ",");	
	Для Каждого ИмяОбласти Из СписокОбластейТД Цикл
		ОбластьДляЗаполнения = МакетОбластей.ПолучитьОбласть(ИмяОбласти);
		Если пПараметры1 <> Неопределено  Тогда
			ОбластьДляЗаполнения.Параметры.Заполнить(пПараметры1);	
		КонецЕсли; 
		Если пПараметры2 <> Неопределено  Тогда
			ОбластьДляЗаполнения.Параметры.Заполнить(пПараметры2);	
		КонецЕсли; 
		пТД.Вывести(ОбластьДляЗаполнения);
	КонецЦикла; 
КонецПроцедуры

Процедура ВывестиКартинкуВОбласть(пОбласть, пКартинка, пИмяРисунка = "")
	Если пКартинка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Попытка
		Рисунок = пОбласть.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
		Рисунок.Картинка = пКартинка; 
		Рисунок.ВыводитьНаПечать = Истина;
		Рисунок.РазмерКартинки = РазмерКартинки.АвтоРазмер; 
		Рисунок.Узор = ТипУзораТабличногоДокумента.БезУзора;
		Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		Если ЗначениеЗаполнено(пИмяРисунка) Тогда
			Рисунок.Имя = пИмяРисунка;
		КонецЕсли; 	
		Рисунок.Расположить(пОбласть.Область(2,3,2,26));
	Исключение
	КонецПопытки;
КонецПроцедуры

Функция ДанныеПараметрыККТ()
	
	ПараметрыККТ = Новый Структура;
	ПараметрыККТ.Вставить("FFDVersionFN", 			"1.1");	
	ПараметрыККТ.Вставить("FFDVersionKKT", 			"1.1");	
	ПараметрыККТ.Вставить("KKTNumber", 				"0546065065065");	  //Регистрационный номер ККТ	
	ПараметрыККТ.Вставить("KKTSerialNumber", 		"1234567895321");	
	ПараметрыККТ.Вставить("FirmwareVersion", 		"3.0.2.42");
	ПараметрыККТ.Вставить("Fiscal", 				Истина);
	ПараметрыККТ.Вставить("FNSerialNumber", 		"065046506046");
	ПараметрыККТ.Вставить("DocumentNumber", 		"999");
	ПараметрыККТ.Вставить("DateTime", 				НачалоМесяца(ТекущаяДата()));

	ПараметрыККТ.Вставить("CompanyName", 			"Тестовая компания"); //OrganizationName
	ПараметрыККТ.Вставить("INN", 					""); //VATIN
	ПараметрыККТ.Вставить("SaleAddress", 			"ул. Суворова 73"); //AddressSettle
	ПараметрыККТ.Вставить("SaleLocation", 			"Магазин Ромашка"); //PlaceSettle
	ПараметрыККТ.Вставить("TaxationSystems", 		"0,1,2,3,4,5");//"," //TaxVariant
	ПараметрыККТ.Вставить("IsOffline", 				Ложь); //OfflineMode
	ПараметрыККТ.Вставить("IsEncrypted", 			Истина); //DataEncryption
	ПараметрыККТ.Вставить("IsService", 				Истина); //ServiceSign
	ПараметрыККТ.Вставить("IsExcisable", 			Истина); //SaleExcisableGoods
	ПараметрыККТ.Вставить("IsGambling", 			Истина); //SignOfGambling
	ПараметрыККТ.Вставить("IsLottery", 				Истина); //SignOfLottery
	ПараметрыККТ.Вставить("AgentTypes", 			"");//","//SignOfAgent
	ПараметрыККТ.Вставить("BSOSing", 				Ложь);
	ПараметрыККТ.Вставить("IsOnlineOnly", 			Ложь); //CalcOnlineSign
	ПараметрыККТ.Вставить("IsAutomaticPrinter", 	Истина); //PrinterAutomatic
	ПараметрыККТ.Вставить("IsAutomatic", 			Ложь); //AutomaticMode
	ПараметрыККТ.Вставить("AutomaticNumber", 		"065056065");
	ПараметрыККТ.Вставить("OFDCompany", 			"ofd.ru");  //OFDOrganizationName
	ПараметрыККТ.Вставить("OFDCompanyINN", 			""); //OFDVATIN
	ПараметрыККТ.Вставить("FNSURL", 				"nalog.ru");  //FNSWebSite
	ПараметрыККТ.Вставить("SenderEmail", 			"test@mail.ru");
	
	Возврат ПараметрыККТ;	
	
КонецФункции

Функция СохраненныеПараметрыККТ(ИдентификаторОборудования)
	Возврат ПолучитьВременноеЗначениеОборудования("ПараметрыККТ" + "_" + ИдентификаторОборудования);
КонецФункции

Функция СформироватьИОтправитьЧек(ДанныеЧекаXML, ПараметрыДокумента, ПараметрыЧекаДляВывода, Электронно, ЭтоЧекКоррекции = Ложь, ПараметрыДрайвера, ТекстОшибки) Экспорт
	
	//Если НЕ ЭмуляторKSOFT_ОбщегоНазначения.СтандартПоддерживается() Тогда
	//	ТекстОшибки = "ВЕРСИЯ БИБЛИОТЕКИ ПОДКЛЮЧАЕМОГО ОБОРУДОВАНИЯ НИЖЕ 2.1.3. КОНФИГУРАЦИЯ НЕ ПОДДЕРЖИВАЕТСЯ";
	//	Возврат Ложь;
	//КонецЕсли; 
		
	ДанныеТекущейСмены = ТекущиеДанныеСмены(ПараметрыДрайвера.ИдентификаторОборудования);
	
	Если ДанныеТекущейСмены = Неопределено Тогда
		ТекстОшибки = "СМЕНА ЗАКРЫТА";
		Возврат Ложь;		
	ИначеЕсли ДанныеТекущейСмены.ShiftState = 1 Тогда	
		ТекстОшибки = "СМЕНА ЗАКРЫТА";
		Возврат Ложь;	
	КонецЕсли; 
	
	ДанныеТекущейСмены.CheckNumber = ДанныеТекущейСмены.CheckNumber + 1;
	ДанныеТекущейСмены.ShiftClosingCheckNumber = ДанныеТекущейСмены.ShiftClosingCheckNumber + 1;

	ФискальныеДанные = ФискальныеДанныеНовогоЧека(ДанныеТекущейСмены);	
	ДанныеТекущейСмены.DateTime = ФискальныеДанные.ДатаВремяЧека;

	ПараметрыЧека1С = ПараметрыЧека1С(ДанныеЧекаXML);
	
	Если ЭтоЧекКоррекции И НЕ (ПараметрыЧека1С.Свойство("CorrectionData") И ЗначениеЗаполнено(ПараметрыЧека1С.CorrectionData)) Тогда
		ТекстОшибки = "НЕ ЗАПОЛЕНЫ ДАННЫЕ КОРРЕКЦИИ";
		Возврат Ложь;
	КонецЕсли; 	
	
	ПараметрыЧекаДляВывода = ПараметрыЧекаПоДанным1С(ПараметрыЧека1С, ДанныеТекущейСмены, ФискальныеДанные, ПараметрыДрайвера.ИдентификаторОборудования);
	ПараметрыЧекаДляВывода.Вставить("ЭтоЧекКоррекции", ЭтоЧекКоррекции);
	
	Для Каждого Элемент Из ПараметрыЧекаДляВывода.ТаблицаОплат Цикл
		Если Элемент.Оплата = "НАЛИЧНЫМИ" Тогда
			Если ПараметрыЧека1С.OperationType = 1 
				ИЛИ ПараметрыЧека1С.OperationType = 4 Тогда
				ДанныеТекущейСмены.CashBalance = ДанныеТекущейСмены.CashBalance + Элемент.Сумма;
			Иначе
				ДанныеТекущейСмены.CashBalance = Макс(ДанныеТекущейСмены.CashBalance - Элемент.Сумма, 0);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла; 
	
	Если ЭтоЧекКоррекции Тогда
		ДанныеТекущейСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].CorrectionCheckCount = ДанныеТекущейСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].CorrectionCheckCount + 1;
		ДанныеТекущейСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].TotalCorrectionChecksAmount = ДанныеТекущейСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].TotalCorrectionChecksAmount + ПараметрыЧекаДляВывода.Итого;
	Иначе
		ДанныеТекущейСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].CheckCount = ДанныеТекущейСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].CheckCount + 1;
		ДанныеТекущейСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].TotalChecksAmount = ДанныеТекущейСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].TotalChecksAmount + ПараметрыЧекаДляВывода.Итого;
	КонецЕсли; 
	
	СохранитьТекущиеДанныеСмены(ДанныеТекущейСмены, ПараметрыДрайвера.ИдентификаторОборудования);
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ShiftNumber", 				ДанныеТекущейСмены.ShiftNumber);
	ПараметрыДокумента.Вставить("CheckNumber", 				ДанныеТекущейСмены.CheckNumber);
	ПараметрыДокумента.Вставить("ShiftClosingCheckNumber", 	ДанныеТекущейСмены.ShiftClosingCheckNumber);
	ПараметрыДокумента.Вставить("AddressSiteInspections", 	ТекущиеПараметрыККТ(ПараметрыДрайвера.ИдентификаторОборудования).FNSURL);
	ПараметрыДокумента.Вставить("FiscalSign",	 			Формат(ФискальныеДанные.ФП, "ЧГ="));
	ПараметрыДокумента.Вставить("DateTime", 				ФискальныеДанные.ДатаВремяЧека);

	Возврат Истина;
	
КонецФункции 

//XML

Функция ПолучитьXMLОтветНаОснованииСтруктуры(пИмяЭлементов, ДанныеДляЗаписи) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();	
	лНесколькоСтрок = СтрЗаменить(пИмяЭлементов, ".", Символы.ПС);	
	
	Для Сч = 1 По СтрЧислоСтрок(лНесколькоСтрок) Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента(СтрПолучитьСтроку(лНесколькоСтрок, Сч));
	КонецЦикла; 	
		
	XMLНаОснованииСтруктуры(ЗаписьXML, ДанныеДляЗаписи);
	
	Для Сч = 1 По СтрЧислоСтрок(лНесколькоСтрок) Цикл
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла; 
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции 

Процедура XMLНаОснованииСтруктуры(ЗаписьXML, ДанныеДляЗаписи)
	//Не струккура и не массив, являются атрибутами объекта
	Для Каждого лЭлемент Из ДанныеДляЗаписи Цикл
		Если ТипЗнч(лЭлемент.Значение) = Тип("Массив") 
			ИЛИ ТипЗнч(лЭлемент.Значение) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если лЭлемент.Ключ = "ИмяЭлемента" Тогда
			Продолжить;
		КонецЕсли; 
		ЗаписьXML.ЗаписатьАтрибут(лЭлемент.Ключ, XMLСтрока(лЭлемент.Значение));	
	КонецЦикла; 
	
	Для Каждого лЭлемент Из ДанныеДляЗаписи Цикл
		Если ТипЗнч(лЭлемент.Значение) = Тип("Структура") Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(лЭлемент.Ключ);
			XMLНаОснованииСтруктуры(ЗаписьXML, лЭлемент.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Если ТипЗнч(лЭлемент.Значение) = Тип("Массив") Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(лЭлемент.Ключ);
			Для Каждого ЭлементМассива Из лЭлемент.Значение Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементМассива.ИмяЭлемента);
				XMLНаОснованииСтруктуры(ЗаписьXML, ЭлементМассива);
				ЗаписьXML.ЗаписатьКонецЭлемента();	   
			КонецЦикла; 
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла; 	
КонецПроцедуры

Функция ЭтоНачалоЭлементаXML(ЧтениеXML, ИмяЭлемента)
	Возврат НРег(ЧтениеXML.Имя) = НРег(ИмяЭлемента) И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента;	
КонецФункции

Функция ЭтоКонецЭлементаXML(ЧтениеXML, ИмяЭлемента)
	Возврат НРег(ЧтениеXML.Имя) = НРег(ИмяЭлемента) И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента;	
КонецФункции

Функция ПараметрыШаблонаXML(ИмяШаблона, XMLПредставление = "", ТипШаблона = Неопределено)
	ПараметрыШаблонаXML = Новый Структура;
	ПараметрыШаблонаXML.Вставить("ИмяШаблона", ИмяШаблона);
	ПараметрыШаблонаXML.Вставить("ПредставлениеШаблона", XMLПредставление);
	ПараметрыШаблонаXML.Вставить("ТипШаблона", ТипШаблона);
	ПараметрыШаблонаXML.Вставить("ЭлементыШаблона", Новый Массив);
	Возврат ПараметрыШаблонаXML;
КонецФункции

Функция ПрочитатьЗначениеXML(ЧтениеXML, ИмяПоля, ТипПоля)
	ЗначениеАтрибута = ЧтениеXML.ПолучитьАтрибут(ИмяПоля);
	Если ЗначениеАтрибута = Неопределено Тогда
		Возврат ЗначениеАтрибута;	
	КонецЕсли; 
	
	Если ТипПоля = Тип("Дата") Тогда
		Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
			Попытка
				Возврат XMLЗначение(Тип("Дата"), ЗначениеАтрибута);
			Исключение
			КонецПопытки; 
		КонецЕсли;
	КонецЕсли;
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(ТипПоля);
	ОписаниеТипа = Новый ОписаниеТипов(СписокТипов);
	Возврат ОписаниеТипа.ПривестиЗначение(ЗначениеАтрибута);
КонецФункции

Процедура ЗаполнитьОбъектXMLПоШаблону(ЧтениеXML, ОбъектЗаполнения, ШаблонXML)

	Если ШаблонXML.Свойство("ТипШаблона") И ШаблонXML.ТипШаблона = Тип("Структура") Тогда
		Для Каждого ЭлементШаблона Из ШаблонXML.ЭлементыШаблона Цикл
			Если ЭлементШаблона.ТипШаблона = Неопределено Тогда
				ОбъектЗаполнения.Вставить(ЭлементШаблона.ИмяШаблона);
			ИначеЕсли НЕ (ЭлементШаблона.ТипШаблона = Тип("Структура") 
						ИЛИ ЭлементШаблона.ТипШаблона = Тип("Массив")) Тогда 
				ОбъектЗаполнения.Вставить(ЭлементШаблона.ИмяШаблона, ПрочитатьЗначениеXML(ЧтениеXML, ЭлементШаблона.ПредставлениеШаблона, ЭлементШаблона.ТипШаблона));
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	Пока ЧтениеXML.Прочитать() Цикл			
		Для Каждого ЭлементШаблона Из ШаблонXML.ЭлементыШаблона Цикл
			Если ЭтоНачалоЭлементаXML(ЧтениеXML, ЭлементШаблона.ПредставлениеШаблона) Тогда
				Если ЭлементШаблона.ТипШаблона = Неопределено Тогда
					Если ТипЗнч(ОбъектЗаполнения) <> Тип("Массив") Тогда
						ОбъектЗаполнения.Вставить(ЭлементШаблона.ИмяШаблона);
					КонецЕсли; 
				ИначеЕсли ЭлементШаблона.ТипШаблона = Тип("Структура") Тогда 
					
					Если НЕ ЗначениеЗаполнено(ЭлементШаблона.ИмяШаблона) Тогда
						ВложенныеПараметры = ОбъектЗаполнения;	
					Иначе	
						ВложенныеПараметры = Новый Структура;	
						Если ТипЗнч(ОбъектЗаполнения) = Тип("Массив") Тогда
							ВложенныеПараметры.Вставить(ЭлементШаблона.ПредставлениеШаблона);
							ОбъектЗаполнения.Добавить(ВложенныеПараметры);
						Иначе
							ОбъектЗаполнения.Вставить(ЭлементШаблона.ИмяШаблона, ВложенныеПараметры);
						КонецЕсли; 
					КонецЕсли; 
					
					
					Для Каждого ЭлементВложения Из ЭлементШаблона.ЭлементыШаблона Цикл
						Если ЭлементВложения.ТипШаблона = Неопределено Тогда
							ВложенныеПараметры.Вставить(ЭлементВложения.ИмяШаблона);
						ИначеЕсли НЕ (ЭлементВложения.ТипШаблона = Тип("Структура") ИЛИ ЭлементВложения.ТипШаблона = Тип("Массив")) Тогда 
							ВложенныеПараметры.Вставить(ЭлементВложения.ИмяШаблона, ПрочитатьЗначениеXML(ЧтениеXML, ЭлементВложения.ПредставлениеШаблона, ЭлементВложения.ТипШаблона));
						КонецЕсли; 
					КонецЦикла;
					
					Пока ЧтениеXML.Прочитать() Цикл
						Для Каждого ЭлементВложения Из ЭлементШаблона.ЭлементыШаблона Цикл
							Если ЭлементВложения.ТипШаблона = Тип("Структура") ИЛИ ЭлементВложения.ТипШаблона = Тип("Массив") Тогда 
								Если НЕ ЭтоНачалоЭлементаXML(ЧтениеXML, ЭлементВложения.ПредставлениеШаблона) Тогда
									Продолжить;
								КонецЕсли;
								Если ЭлементВложения.ТипШаблона = Тип("Структура") Тогда
									ВложенныеПараметрыВложения = Новый Структура;
									ВложенныеПараметры.Вставить(ЭлементВложения.ИмяШаблона, ВложенныеПараметрыВложения);
									ЗаполнитьОбъектXMLПоШаблону(ЧтениеXML, ВложенныеПараметрыВложения, ЭлементВложения);  
								ИначеЕсли ЭлементВложения.ТипШаблона = Тип("Массив") Тогда 
									ВложенныйМассив = Новый Массив;
									ВложенныеПараметры.Вставить(ЭлементВложения.ИмяШаблона, ВложенныйМассив);
									ЗаполнитьОбъектXMLПоШаблону(ЧтениеXML, ВложенныйМассив, ЭлементВложения); 
								КонецЕсли; 
							КонецЕсли;
						КонецЦикла;
						Если ЭтоКонецЭлементаXML(ЧтениеXML, ЭлементШаблона.ПредставлениеШаблона) Тогда
							Прервать;	
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли ЭлементШаблона.ТипШаблона = Тип("Массив") Тогда 
					ВложенныйМассив = Новый Массив;
					Если ТипЗнч(ОбъектЗаполнения) = Тип("Массив") Тогда
						ОбъектЗаполнения.Добавить(ВложенныйМассив);
					Иначе
						ОбъектЗаполнения.Вставить(ЭлементШаблона.ИмяШаблона, ВложенныйМассив);
					КонецЕсли; 
					ЗаполнитьОбъектXMLПоШаблону(ЧтениеXML, ВложенныйМассив, ЭлементШаблона); 
				Иначе
					Если ТипЗнч(ОбъектЗаполнения) = Тип("Массив") Тогда
						ОбъектЗаполнения.Добавить(ПрочитатьЗначениеXML(ЧтениеXML, ЭлементШаблона.ПредставлениеШаблона, ЭлементШаблона.ТипШаблона));
					Иначе
						ОбъектЗаполнения.Вставить(ЭлементШаблона.ИмяШаблона, ПрочитатьЗначениеXML(ЧтениеXML, ЭлементШаблона.ПредставлениеШаблона, ЭлементШаблона.ТипШаблона));
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		Если ШаблонXML.Свойство("ПредставлениеШаблона") И ЗначениеЗаполнено(ШаблонXML.ПредставлениеШаблона) И ЭтоКонецЭлементаXML(ЧтениеXML, ШаблонXML.ПредставлениеШаблона) Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьXMLТекстовыйДокумент(ДанныеXML, ШаблонXML)
	Попытка
		//Сообщить("Текст XML Запроса: " + ДанныеXML);
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеXML);
		ЧтениеXML.ПерейтиКСодержимому();
		ИтоговаяСтруктура = Новый Структура;
		ЗаполнитьОбъектXMLПоШаблону(ЧтениеXML, ИтоговаяСтруктура, ШаблонXML);		
		ЧтениеXML.Закрыть();
		Возврат ИтоговаяСтруктура;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки; 
КонецФункции

//XML

//ШАБЛОНЫ XML

Функция PositionsШаблонXML()
	ОсновнойШаблон = Новый Структура("ЭлементыШаблона", Новый Массив);
	
	ШаблонPositions = ПараметрыШаблонаXML("Positions", "Positions", Тип("Массив"));	
	
	ШаблонPositions.ЭлементыШаблона.Добавить(TextStringШаблонXML());		
	ШаблонPositions.ЭлементыШаблона.Добавить(BarcodeШаблонXML());
	
	ОсновнойШаблон.ЭлементыШаблона.Добавить(ШаблонPositions);
	
	Возврат ОсновнойШаблон;	
	
КонецФункции

Функция ДанныеКассираШаблонXML()
	
	ОсновнойШаблон = Новый Структура("ЭлементыШаблона", Новый Массив);	
	ШаблонParameters = ПараметрыШаблонаXML("", "Parameters", Тип("Структура"));	
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("name", "CashierName", Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("vatin", "CashierINN", Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("address", "SaleAddress", Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("paymentsAddress", "SaleLocation", Тип("Строка")));
	
	ОсновнойШаблон.ЭлементыШаблона.Добавить(ШаблонParameters);
	
	Возврат ОсновнойШаблон;
	
КонецФункции

Функция CorrectionDataШаблонXML()
	
	ШаблонCorrectionData = ПараметрыШаблонаXML("CorrectionData", "CorrectionData", Тип("Структура"));
	ШаблонCorrectionData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Type", "Type", Тип("Число")));	
	ШаблонCorrectionData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Description", "Description", Тип("Строка")));
	ШаблонCorrectionData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Date", "Date", Тип("Дата")));
	ШаблонCorrectionData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Number", "Number", Тип("Строка")));
	Возврат ШаблонCorrectionData;
	
КонецФункции

Функция AgentDataШаблонXML()
	
	ШаблонAgentData = ПараметрыШаблонаXML("AgentData", "AgentData", Тип("Структура"));
	ШаблонAgentData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AgentOperation", "AgentOperation", Тип("Строка")));
	ШаблонAgentData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AgentPhone", "AgentPhone", Тип("Строка")));
	ШаблонAgentData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("PaymentProcessorPhone", "PaymentProcessorPhone", Тип("Строка")));
	ШаблонAgentData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AcquirerOperatorPhone", "AcquirerOperatorPhone", Тип("Строка")));
	ШаблонAgentData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AcquirerOperatorName", "AcquirerOperatorName", Тип("Строка")));
	ШаблонAgentData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AcquirerOperatorAddress", "AcquirerOperatorAddress", Тип("Строка")));
	ШаблонAgentData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AcquirerOperatorINN", "AcquirerOperatorINN", Тип("Строка")));
	Возврат ШаблонAgentData;
	
КонецФункции

Функция VendorDataШаблонXML()
	
	ШаблонVendorData = ПараметрыШаблонаXML("VendorData", "VendorData", Тип("Структура"));
	ШаблонVendorData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("VendorPhone", "VendorPhone", Тип("Строка")));
	ШаблонVendorData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("VendorName", "VendorName", Тип("Строка")));
	ШаблонVendorData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("VendorINN", "VendorINN", Тип("Строка")));
	
	Возврат ШаблонVendorData;
	
КонецФункции

Функция UserAttributeШаблонXML()
	
	ШаблонUserAttribute = ПараметрыШаблонаXML("UserAttribute", "UserAttribute", Тип("Структура"));
	ШаблонUserAttribute.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Name", "Name", Тип("Строка")));
	ШаблонUserAttribute.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Value", "Value", Тип("Строка")));
	Возврат ШаблонUserAttribute;
	
КонецФункции

Функция GoodCodeDataШаблонXML()
	
	ШаблонGoodCodeData = ПараметрыШаблонаXML("GoodCodeData", "GoodCodeData", Тип("Структура"));
	//ШаблонGoodCodeData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("StampType", "StampType", Тип("Строка")));
	//ШаблонGoodCodeData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Stamp", "Stamp", Тип("Строка")));
	//ШаблонGoodCodeData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("GTIN", "GTIN", Тип("Строка")));
	//ШаблонGoodCodeData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("SerialNumber", "SerialNumber", Тип("Строка")));
	ШаблонGoodCodeData.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("MarkingCode", "MarkingCode", Тип("Строка"))); //тэг 1162
	
	Возврат ШаблонGoodCodeData;
КонецФункции

Функция TextStringШаблонXML()
	
	ШаблонTextString = ПараметрыШаблонаXML("TextString", "TextString", Тип("Структура"));
	ШаблонTextString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Text", "Text", Тип("Строка")));
	
	Возврат ШаблонTextString;
КонецФункции

Функция BarcodeШаблонXML()
	
	ШаблонBarcode = ПараметрыШаблонаXML("Barcode", "Barcode", Тип("Структура"));
	ШаблонBarcode.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Type", "Type", Тип("Строка")));
	ШаблонBarcode.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Value", "Value", Тип("Строка")));

	Возврат ШаблонBarcode;
КонецФункции

Функция FiscalStringШаблонXML()
	
	ШаблонFiscalString = ПараметрыШаблонаXML("FiscalString", "FiscalString", Тип("Структура"));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Name", 				"Name", 				Тип("Строка")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Quantity", 			"Quantity", 			Тип("Число")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("PriceWithDiscount", 	"PriceWithDiscount", 	Тип("Число")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AmountWithDiscount", 	"AmountWithDiscount", 	Тип("Число")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("DiscountAmount", 		"DiscountAmount", 		Тип("Число")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Department", 			"Department",	 		Тип("Число")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("VATRate", 				"VATRate", 				Тип("Строка")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("VATAmount", 			"VATAmount", 			Тип("Число")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("PaymentMethod", 		"PaymentMethod", 		Тип("Число")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CalculationSubject", 	"CalculationSubject", 	Тип("Число")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CalculationAgent", 	"CalculationAgent", 	Тип("Строка")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CountryOfOrigin", 		"CountryOfOrigin", 		Тип("Строка")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CustomsDeclaration", 	"CustomsDeclaration", 	Тип("Строка")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AdditionalAttribute", 	"AdditionalAttribute", 	Тип("Строка")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("ExciseAmount", 		"ExciseAmount", 		Тип("Число")));
	ШаблонFiscalString.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("MeasurementUnit", 		"MeasurementUnit", 		Тип("Строка")));
	
	ШаблонFiscalString.ЭлементыШаблона.Добавить(VendorDataШаблонXML());
	ШаблонFiscalString.ЭлементыШаблона.Добавить(AgentDataШаблонXML());
	ШаблонFiscalString.ЭлементыШаблона.Добавить(GoodCodeDataШаблонXML());
	
	Возврат ШаблонFiscalString;
КонецФункции

Функция CheckШаблонXML()
			
	ШаблонParameters = ПараметрыШаблонаXML("", "Parameters", Тип("Структура"));	
	
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CashierName", 			"CashierName", 			Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CashierINN", 			"CashierINN", 			Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("OperationType", 			"OperationType", 		Тип("Число")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("TaxationSystem", 		"TaxationSystem", 		Тип("Число")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CustomerInfo", 			"CustomerInfo", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CustomerINN", 			"CustomerINN", 			Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CustomerEmail", 			"CustomerEmail", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CustomerPhone", 			"CustomerPhone", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("SenderEmail", 			"SenderEmail", 			Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("SaleAddress", 			"SaleAddress", 			Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("SaleLocation", 			"SaleLocation", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AgentType", 				"AgentType", 			Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AdditionalAttribute", 	"AdditionalAttribute", 	Тип("Строка")));
	
	ШаблонParameters.ЭлементыШаблона.Добавить(CorrectionDataШаблонXML());
	ШаблонParameters.ЭлементыШаблона.Добавить(AgentDataШаблонXML());	
	ШаблонParameters.ЭлементыШаблона.Добавить(VendorDataШаблонXML());
	ШаблонParameters.ЭлементыШаблона.Добавить(UserAttributeШаблонXML());
	
	ШаблонPositions = ПараметрыШаблонаXML("Positions", "Positions", Тип("Массив"));
	ШаблонPositions.ЭлементыШаблона.Добавить(FiscalStringШаблонXML());	
	ШаблонPositions.ЭлементыШаблона.Добавить(TextStringШаблонXML());		
	ШаблонPositions.ЭлементыШаблона.Добавить(BarcodeШаблонXML());	
	
	ШаблонPayments = ПараметрыШаблонаXML("Payments", "Payments", Тип("Структура"));
	ШаблонPayments.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Cash", 				"Cash", 				Тип("Число")));	
	ШаблонPayments.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("ElectronicPayment", 	"ElectronicPayment", 	Тип("Число")));
	ШаблонPayments.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("PrePayment", 			"PrePayment", 			Тип("Число")));
	ШаблонPayments.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("PostPayment", 			"PostPayment", 			Тип("Число")));
	ШаблонPayments.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Barter", 				"Barter", 				Тип("Число")));
	
	ОсновнойШаблон = Новый Структура("ЭлементыШаблона", Новый Массив);
	ОсновнойШаблон.ЭлементыШаблона.Добавить(ШаблонParameters);
	ОсновнойШаблон.ЭлементыШаблона.Добавить(ШаблонPositions);	
	ОсновнойШаблон.ЭлементыШаблона.Добавить(ШаблонPayments);	
	
	Возврат ОсновнойШаблон;
	
КонецФункции

Функция FNШаблонXML()
	
	ШаблонParameters = ПараметрыШаблонаXML("", "Parameters", Тип("Структура"));	
	
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CashierName", 		"CashierName", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CashierINN", 		"CashierINN", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("RegistrationReasonCode", "RegistrationReasonCode", Тип("Число")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("RegistrationLabelCodes", "RegistrationLabelCodes", Тип("Строка")));
	
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("FFDVersionFN", 		"FFDVersionFN", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("FFDVersionKKT", 		"FFDVersionKKT", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("KKTNumber", 			"KKTNumber", 			Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("KKTSerialNumber", 	"KKTSerialNumber", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("FirmwareVersion", 	"FirmwareVersion", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("Fiscal", 			"Fiscal", 				Тип("Булево")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("FNSerialNumber", 	"FNSerialNumber", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("DocumentNumber", 	"DocumentNumber", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("DateTime", 			"DateTime", 			Тип("Дата")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("CompanyName", 		"CompanyName", 			Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("INN", 				"INN", 					Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("SaleAddress", 		"SaleAddress", 			Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("SaleLocation", 		"SaleLocation", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("TaxationSystems", 	"TaxationSystems", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("IsOffline", 			"IsOffline", 			Тип("Булево")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("IsEncrypted", 		"IsEncrypted", 			Тип("Булево")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("IsService", 			"IsService", 			Тип("Булево")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("IsExcisable", 		"IsExcisable", 			Тип("Булево")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("IsGambling", 		"IsGambling", 			Тип("Булево")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("IsLottery", 			"IsLottery", 			Тип("Булево")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AgentTypes", 		"AgentTypes", 			Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("BSOSing", 			"BSOSing", 				Тип("Булево")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("IsOnlineOnly", 		"IsOnlineOnly", 		Тип("Булево")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("IsAutomaticPrinter", "IsAutomaticPrinter", 	Тип("Булево")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("IsAutomatic", 		"IsAutomatic", 			Тип("Булево")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("AutomaticNumber", 	"AutomaticNumber", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("OFDCompany", 		"OFDCompany", 			Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("OFDCompanyINN", 		"OFDCompanyINN", 		Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("FNSURL", 			"FNSURL", 				Тип("Строка")));
	ШаблонParameters.ЭлементыШаблона.Добавить(ПараметрыШаблонаXML("SenderEmail", 		"SenderEmail", 			Тип("Строка")));
	
	Возврат ШаблонParameters;
КонецФункции
 
//ШАБЛОНЫ XML

Функция ПараметрыКассира()
	Возврат Новый Структура("name, vatin", "","");
КонецФункции

Функция СтруктураКассира(XMLДанныеКассира) Экспорт 
	ДанныеКассира = ПараметрыКассира();
	Если ЗначениеЗаполнено(XMLДанныеКассира) Тогда
		ДанныеКассираXML = РазобратьXMLТекстовыйДокумент(XMLДанныеКассира, ДанныеКассираШаблонXML());
		Если ДанныеКассираXML <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеКассира, ДанныеКассираXML);	
		КонецЕсли;
	КонецЕсли; 
	Возврат ДанныеКассира;
КонецФункции

Функция ПоляАгента(AgentData)
	
	СписокПолеАгента = Новый Массив;
	Если AgentData.Свойство("AgentOperation") Тогда
		СписокПолеАгента.Добавить(Новый Структура("Наименование, Текст", "ПЛ.АГЕНТ ОПЕР.", AgentData.AgentOperation));
	КонецЕсли; 	
	Если AgentData.Свойство("AgentPhone") Тогда
		СписокПолеАгента.Добавить(Новый Структура("Наименование, Текст", "ПЛ.АГЕНТ ТЛФ.", AgentData.AgentPhone));
	КонецЕсли; 	
	
	Если AgentData.Свойство("AcquirerOperatorName") Тогда
		СписокПолеАгента.Добавить(Новый Структура("Наименование, Текст", "ОПЕРАТОР ПЕРЕВОДА", AgentData.AcquirerOperatorName));
	КонецЕсли; 	
	Если AgentData.Свойство("AcquirerOperatorPhone") Тогда
		СписокПолеАгента.Добавить(Новый Структура("Наименование, Текст", "ТЛФ.ОП.ПЕРЕВОДА", AgentData.AcquirerOperatorPhone));
	КонецЕсли; 
	Если AgentData.Свойство("AcquirerOperatorAddress") Тогда
		СписокПолеАгента.Добавить(Новый Структура("Наименование, Текст", "АДР.ОП.ПЕРЕВОДА", AgentData.AcquirerOperatorAddress));
	КонецЕсли;
	Если AgentData.Свойство("AcquirerOperatorINN") Тогда
		СписокПолеАгента.Добавить(Новый Структура("Наименование, Текст", "ИНН ОП.ПЕРЕВОДА", AgentData.AcquirerOperatorINN));
	КонецЕсли;
	
	Если AgentData.Свойство("PaymentProcessorPhone") Тогда
		СписокПолеАгента.Добавить(Новый Структура("Наименование, Текст", "ОПЕР.ПО ПРИЕМУ ПЛАТ.ТЛФ.", AgentData.PaymentProcessorPhone));
	КонецЕсли; 
	
	Возврат СписокПолеАгента;
	
КонецФункции

Функция СтруктураЗаполнена(ДанныеСтруктуры)
	Если ДанныеСтруктуры = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	Для Каждого ЭлементСтруктуры Из ДанныеСтруктуры Цикл
		Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
			Возврат Истина;			
		КонецЕсли; 
	КонецЦикла; 
	Возврат Ложь;
КонецФункции

Функция ЗаменитьНедопустимыеСимволыXML(Знач СтрокаЗамены)
	СписокНедостимыхСимволов = Новый Соответствие;
	СписокНедостимыхСимволов.Вставить("""", "&quot;");
	СписокНедостимыхСимволов.Вставить("©", "&copy;");
	СписокНедостимыхСимволов.Вставить("®", "&reg;");
	СписокНедостимыхСимволов.Вставить("™", "&trade;");
	СписокНедостимыхСимволов.Вставить("„", "&bdquo;");
	СписокНедостимыхСимволов.Вставить("“", "&ldquo;");
	СписокНедостимыхСимволов.Вставить("«", "&laquo;");
	СписокНедостимыхСимволов.Вставить("»", "&raquo;");
	СписокНедостимыхСимволов.Вставить(">", "&gt;");
	СписокНедостимыхСимволов.Вставить("<", "&lt;");
	СписокНедостимыхСимволов.Вставить("≥", "&ge;");
	СписокНедостимыхСимволов.Вставить("≤", "&le;");
	СписокНедостимыхСимволов.Вставить("≈", "&asymp;");
	СписокНедостимыхСимволов.Вставить("&", "&amp;");
	СписокНедостимыхСимволов.Вставить("∞", "&infin;");
	СписокНедостимыхСимволов.Вставить("§", "&sect;");
	
	Для Каждого НедопустимыйСимвол Из СписокНедостимыхСимволов Цикл
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены, НедопустимыйСимвол.Ключ, НедопустимыйСимвол.Значение);
	КонецЦикла; 	
	
	ПозицияСимвола = НайтиНедопустимыеСимволыXML(СтрокаЗамены);
	Пока ПозицияСимвола <> 0 Цикл
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены, Сред(СтрокаЗамены, ПозицияСимвола, 1), "");
		ПозицияСимвола = НайтиНедопустимыеСимволыXML(СтрокаЗамены);
	КонецЦикла; 
	
	Возврат СтрокаЗамены;
	
КонецФункции

Функция ПравильнаяСтрокаПоискаDefault(ЗначениеПараметра, СтрокаПоиска)
	
	НачалоПозицииDefault = Найти(СтрокаПоиска, "DefaultValue=""") + 14;
	ЗначениеDEFAULT = "";
	Для Сч = НачалоПозицииDefault По СтрДлина(СтрокаПоиска) Цикл
		СимволСтроки = Сред(СтрокаПоиска, Сч, 1);
		Если СимволСтроки = """" Тогда
			Прервать;	
		КонецЕсли; 
		ЗначениеDEFAULT = ЗначениеDEFAULT + СимволСтроки;
	КонецЦикла; 
	СтрокаЗаменыDEFAULT = СтрШаблон("DefaultValue=""%1""", ЗначениеDEFAULT);
	ПравильнаяСтрокаDEFAULT = СтрШаблон("DefaultValue=""%1""", XMLСтрока(Формат(ЗначениеПараметра, "ЧГ=; БЛ=False; БИ=True")));
	Возврат СтрЗаменить(СтрокаПоиска, СтрокаЗаменыDEFAULT, ПравильнаяСтрокаDEFAULT);
	
КонецФункции

Функция ПроставитьЗначенияПоУмолчаниюПараметров(ПараметрыДрайвераXML, ИдентификаторОборудования) Экспорт 
	
	ТекущиеПараметрыККТ = ТекущиеПараметрыККТ(ИдентификаторОборудования);
	Для Каждого Параметр Из ТекущиеПараметрыККТ Цикл
		ПозицияПараметра = Найти(ПараметрыДрайвераXML, """" + Параметр.Ключ + """");
		Если ПозицияПараметра = 0 Тогда
			Продолжить;	
		КонецЕсли; 	
		ТекстПоиска = Сред(ПараметрыДрайвераXML, ПозицияПараметра);
		ПозицияЗакрывающегоСимвола = Найти(ТекстПоиска, "/>");
		СтрокаПоиска = Лев(ТекстПоиска, ПозицияЗакрывающегоСимвола-1); 		
		ПравильнаяСтрокаПоиска = ПравильнаяСтрокаПоискаDefault(Параметр.Значение, СтрокаПоиска);
		ПараметрыДрайвераXML = СтрЗаменить(ПараметрыДрайвераXML, СтрокаПоиска, ПравильнаяСтрокаПоиска);
	КонецЦикла;
	
	Возврат ПараметрыДрайвераXML;
	
КонецФункции

Процедура ОперацияФН(ПараметрыФискализацииXML, ИдентификаторОборудования) Экспорт
	
	ПараметрыЧека1С = РазобратьXMLТекстовыйДокумент(ПараметрыФискализацииXML, FNШаблонXML());
	ТекущиеПараметрыККТ = ТекущиеПараметрыККТ(ИдентификаторОборудования);
	ЗаполнитьЗначенияСвойств(ТекущиеПараметрыККТ, ПараметрыЧека1С);
	СохранитьПараметрыККТ(ТекущиеПараметрыККТ, ИдентификаторОборудования);	
	
КонецПроцедуры

Процедура Подключить(ПараметрыДрайвера) Экспорт
	
	ТекущиеПараметрыККТ = ТекущиеПараметрыККТ(ПараметрыДрайвера.ИдентификаторОборудования);
	ЗаполнитьЗначенияСвойств(ТекущиеПараметрыККТ, ПараметрыДрайвера);
	СохранитьПараметрыККТ(ТекущиеПараметрыККТ, ПараметрыДрайвера.ИдентификаторОборудования);
	
КонецПроцедуры
 
Процедура СохранитьПараметрыККТ(ПараметрыККТ, ИдентификаторОборудования)
	СохранитьВременноеЗначениеОборудования("ПараметрыККТ" + "_" + ИдентификаторОборудования, ПараметрыККТ);
КонецПроцедуры

Функция ПолучитьПредставлениеТипаДляЧека(пТип)
	Если пТип = 1 Тогда
		Возврат "ПРИХОД"
	ИначеЕсли пТип = 2 Тогда 
		Возврат "ВОЗВРАТ ПРИХОДА";
	ИначеЕсли пТип = 3 Тогда
		Возврат "РАСХОД";
	ИначеЕсли пТип = 4 Тогда 
		Возврат "ВОЗВРАТ РАСХОДА";	
	Иначе
		Возврат "";
	КонецЕсли; 	
КонецФункции

Функция ФорматЧисла(пЧисло, БезДробей = Ложь)
	Если БезДробей Тогда
		Возврат Формат(пЧисло, "ЧДЦ=2; ЧРД=.; ЧГ=");	 	
	Иначе
		Возврат Формат(пЧисло, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");	
	КонецЕсли; 
КонецФункции

Функция ПолучитьТаблицуПечатиПоТипамОплат(Payments, СуммаЧека)
	ТаблицаОплат = Новый ТаблицаЗначений;
	ТаблицаОплат.Колонки.Добавить("Наименование");
	ТаблицаОплат.Колонки.Добавить("Приоритет");
	ТаблицаОплат.Колонки.Добавить("Сумма");
	Если ЗначениеЗаполнено(Payments.Cash) Тогда
		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.Наименование = "НАЛИЧНЫМИ";
		НоваяСтрока.Приоритет = 0;
		НоваяСтрока.Сумма = Payments.Cash;
	КонецЕсли;
	Если ЗначениеЗаполнено(Payments.ElectronicPayment) Тогда 
		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.Наименование = "БЕЗНАЛИЧНЫМИ";
		НоваяСтрока.Приоритет = 1;
		НоваяСтрока.Сумма = Payments.ElectronicPayment;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Payments.PrePayment) Тогда 
		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.Наименование = "ПРЕДОПЛАТА";
		НоваяСтрока.Приоритет = 2;
		НоваяСтрока.Сумма = Payments.PrePayment;
	КонецЕсли;
	Если ЗначениеЗаполнено(Payments.PostPayment) Тогда 
		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.Наименование = "ПОСТОПЛАТА";
		НоваяСтрока.Приоритет = 3;
		НоваяСтрока.Сумма = Payments.PostPayment;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Payments.Barter) Тогда 
		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.Наименование = "ВСТР.ПРЕДОСТАВЛЕНИЕ";
		НоваяСтрока.Приоритет = 4;
		НоваяСтрока.Сумма = Payments.Barter;
	КонецЕсли;
	Если СуммаЧека <> ТаблицаОплат.Итог("Сумма") Тогда
		Сдача = ТаблицаОплат.Итог("Сумма") - СуммаЧека;
		Если Сдача > 0 Тогда
			лНоваяСтрока = ТаблицаОплат.Добавить();
			лНоваяСтрока.Наименование = "СДАЧА";
			лНоваяСтрока.Сумма = Сдача;
			лНоваяСтрока.Приоритет = 5;
		КонецЕсли; 
	КонецЕсли; 	
	ТаблицаОплат.Сортировать("Приоритет");
	Возврат ТаблицаОплат;
КонецФункции

Функция ПолучитьНаименованиеСистемыНалогообложения(СистемаНалогообложения)
	
	Возврат КодКраткоеИмяВыборки(ПолныеДанныеСНО())[СистемаНалогообложения];
		
КонецФункции

Функция ПолныеДанныеСНО()
	
	мСписокСНО = Новый Массив;
	ЗаполнитьПараметрыЭлемента(мСписокСНО, "ОБЩАЯ", 0, "ОСН", "Общая");
	ЗаполнитьПараметрыЭлемента(мСписокСНО, "УСН ДОХОДЫ", 1, "УСН доход", "Упрощенная Доход");
	ЗаполнитьПараметрыЭлемента(мСписокСНО, "УСН ДОХОДЫ-РАСХОДЫ", 2, "УСН доход-расход", "Упрощенная Доход минус Расход");
	ЗаполнитьПараметрыЭлемента(мСписокСНО, "ЕНВД", 3, "ЕНВД", "Единый налог на вмененный доход");
	ЗаполнитьПараметрыЭлемента(мСписокСНО, "СЕЛЬХОЗ", 4, "ЕСН", "Единый сельскохозяйственный налог");
	ЗаполнитьПараметрыЭлемента(мСписокСНО, "ПАТЕНТ", 5, "Патент", "Патентная система налогообложения");
	Возврат мСписокСНО;	

КонецФункции

Процедура ЗаполнитьИВывестиОбласть(пТД, пОбласть, пПараметры = Неопределено)
	Если пПараметры <> Неопределено  Тогда
		пОбласть.Параметры.Заполнить(пПараметры);	
	КонецЕсли; 
	пТД.Вывести(пОбласть);
КонецПроцедуры

Процедура ЗаполнитьПараметрыЭлемента(СписокЭлементов, Ключ, Код, Кратко, Полно, Исключить = Ложь, ДляПечати = "")
	СписокЭлементов.Добавить(Новый Структура("Ключ, Код, Кратко, Полно, Исключить, ДляПечати", Ключ, Код, Кратко, Полно, Исключить, ДляПечати));		
КонецПроцедуры

Функция КодКраткоеИмяВыборки(ПолныеДанныеВыборки)
	
	СписокЭлементов = Новый Соответствие;
	Для Каждого ЭлементВыборки Из ПолныеДанныеВыборки Цикл
		Если ЭлементВыборки.Исключить Тогда
			Продолжить;
		КонецЕсли; 
		СписокЭлементов.Вставить(ЭлементВыборки.Код, ЭлементВыборки.Кратко);	
	КонецЦикла; 
	
	Возврат СписокЭлементов;
	
КонецФункции

Функция ПараметрыДанныеПоставщика()
	
	Параметры = Новый Структура();
	Параметры.Вставить("Телефон");      // Строка - Телефон поставщика.
	Параметры.Вставить("Наименование"); // Строка - Наименование поставщика.
	Параметры.Вставить("ИНН");          // Строка - ИНН поставщика.
	Возврат Параметры; 
	
КонецФункции

Функция ПолучитьНаименованиеПроцентаНДСПоСтавке(пСтавка)
	
	Если пСтавка = "none" ИЛИ пСтавка = ""  Тогда
       Возврат "БЕЗ НДС";
	Иначе
		Возврат пСтавка + "%";	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНаименованиеПризнакаПредметаРасчета(ПризнакПредметаРасчета)
	
	Возврат КодПолноеИмяВыборки(ПолныеДанныеПризнаковПредметовРасчета())[ПризнакПредметаРасчета];
	
КонецФункции

Функция ПолныеДанныеПризнаковПредметовРасчета()
	
	мСписокПризнаковПредметовРасчета = Новый Массив;
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "Товар", 1, "Товар", "ТОВАР");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ПодакцизныйТовар", 2, "Подакцизный товар", "ПОДАКЦИЗНЫЙ ТОВАР");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "Работа", 3, "Работа", "РАБОТА");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "Услуга", 4, "Услуга", "УСЛУГА");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "СтавкаАзартнойИгры", 5, "Ставка азартной игры", "СТАВКА АЗАРТНОЙ ИГРЫ");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ВыигрышАзартнойИгры", 6, "Выигрыш азартной игры", "ВЫИГРЫШ АЗАРТНОЙ ИГРЫ");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ЛотерейныйБилет", 7, "Лотерейный билет", "ЛОТЕРЕЙНЫЙ БИЛЕТ");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ВыигрышЛотереи", 8, "Выигрыш лотереи", "ВЫИГРЫШ ЛОТЕРЕИ");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ПредоставлениеРИД", 9, "Предоставление РИД", "ПРЕДОСТАВЛЕНИЕ РИД");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "Платеж", 10, "Платеж", "ПЛАТЕЖ");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ПлатежВыплата", 10, "Платеж", "ПЛАТЕЖ", Истина);
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "АгентскоеВознаграждение", 11, "Агентское вознаграждение", "АГЕНТСКОЕ ВОЗНАГРАЖДЕНИЕ");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "Выплата", 12, "Выплата", "ВЫПЛАТА");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "СоставнойПредметРасчета", 12, "Выплата", "ВЫПЛАТА", Истина);
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ИнойПредметРасчета", 13, "Иной предмет расчета", "ИНОЙ ПРЕДМЕТ РАСЧЕТА");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ИмущественноеПраво", 14, "Имущественное право", "ИМУЩЕСТВЕННОЕ ПРАВО");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ВнереализационныйДоход", 15, "Внереализационный доход", "ВНЕРЕАЛИЗАЦИОННЫЙ ДОХОД");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "СтраховыеВзносы", 16, "Страховые взносы", "СТРАХОВЫЕ ВЗНОСЫ");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ТорговыйСбор", 17, "Торговый сбор", "ТОРГОВЫЙ СБОР");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "КурортныйСбор", 18, "Курортный сбор", "КУРОРТНЫЙ СБОР");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "Залог", 19, "Залог", "ЗАЛОГ");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "Расход", 20, "Расход", "РАСХОД");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ОбязательноеПенсионноеСтрахованиеИП", 21, "Обязательное пенсионное страхование ИП", "ОБЯЗАТЕЛЬНОЕ ПЕНСИОННОЕ СТРАХОВАНИЕ ИП");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ОбязательноеПенсионноеСтрахование", 22, "Обязательное пенсионное страхование", "ОБЯЗАТЕЛЬНОЕ ПЕНСИОННОЕ СТРАХОВАНИЕ");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ОбязательноеМедицинскоеСтрахованиеИП", 23, "Обязательное медицинское страхование ИП", "ОБЯЗАТЕЛЬНОЕ МЕДИЦИНСКОЕ СТРАХОВАНИЕ ИП");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ОбязательноеМедицинскоеСтрахование", 24, "Обязательное медицинское страхование", "ОБЯЗАТЕЛЬНОЕ МЕДИЦИНСКОЕ СТРАХОВАНИЕ");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ОбязательноеСоциальноеСтрахование", 25, "Обязательное социальное страхование", "ОБЯЗАТЕЛЬНОЕ СОЦИАЛЬНОЕ СТРАХОВАНИЕ");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковПредметовРасчета, "ПлатежКазино", 26, "Платеж казино", "ПЛАТЕЖ КАЗИНО");
	
	Возврат мСписокПризнаковПредметовРасчета;	
	
КонецФункции

Функция ПолучитьНаименованиеПризнакаСпособаРасчета(ПризнакСпособаРасчета)
	
	Возврат КодПолноеИмяВыборки(ПолныеДанныеПризнаковСпособаРасчета())[ПризнакСпособаРасчета];

КонецФункции

Функция ПолныеДанныеПризнаковСпособаРасчета()
	
	мСписокПризнаковСпособаРасчета = Новый Массив;
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковСпособаРасчета, "ПредоплатаПолная", 1, "Предоплата полная", "ПРЕДОПЛАТА 100%",,"[ПрОп100]");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковСпособаРасчета, "ПредоплатаЧастичная", 2, "Предоплата частичная", "ПРЕДОПЛАТА",,"[ПрОпл]");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковСпособаРасчета, "Аванс", 3, "Аванс", "АВАНС",,"[Аванс]");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковСпособаРасчета, "ПередачаСПолнойОплатой", 4, "Передача с полной оплатой", "ПОЛНЫЙ РАСЧЕТ",,"[ПОпл]");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковСпособаРасчета, "ПередачаСЧастичнойОплатой", 5, "Передача с частичной оплатой", "ЧАСТИЧНЫЙ РАСЧЕТ И КРЕДИТ",,"[ЧОпл]");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковСпособаРасчета, "ПередачаБезОплаты", 6, "Передача без оплаты", "ПЕРЕДАЧА В КРЕДИТ",,"[БезОп]");
	ЗаполнитьПараметрыЭлемента(мСписокПризнаковСпособаРасчета, "ОплатаКредита", 7, "Оплата кредита", "ОПЛАТА КРЕДИТА",,"[Кред]");
	Возврат мСписокПризнаковСпособаРасчета;
	
КонецФункции

Функция КодПолноеИмяВыборки(ПолныеДанныеВыборки)
	
	СписокЭлементов = Новый Соответствие;
	Для Каждого ЭлементВыборки Из ПолныеДанныеВыборки Цикл
		Если ЭлементВыборки.Исключить Тогда
			Продолжить;
		КонецЕсли; 
		СписокЭлементов.Вставить(ЭлементВыборки.Код, ЭлементВыборки.Полно);	
	КонецЦикла; 
	
	Возврат СписокЭлементов;		
КонецФункции

Функция ПолучитьНаименованиеДляПечатиПоТипуОплаты(пТипОплаты)
	Если пТипОплаты = 0 Тогда
		Возврат "НАЛИЧНЫМИ";
	ИначеЕсли пТипОплаты = 1 Тогда 
		Возврат "БЕЗНАЛИЧНЫМИ";
	ИначеЕсли пТипОплаты = 2 Тогда 	
		Возврат "БЕЗНАЛИЧНЫМИ";  //Банковский кредит
	ИначеЕсли пТипОплаты = 3 Тогда 
	  	Возврат "ПОСТОПЛАТА";//Сертификат
	ИначеЕсли пТипОплаты = 4 Тогда 
		Возврат "ПРЕДОПЛАТА"; //ПРЕДОПЛАТА	
	ИначеЕсли пТипОплаты = 5 Тогда 
		Возврат "ПОСТОПЛАТА"; //ПОСТОПЛАТА
	ИначеЕсли пТипОплаты = 6 Тогда 
		Возврат "ВСТР.ПРЕДОСТАВЛЕНИЕ"; //ВстречноеПредоставление	
	Иначе
		Возврат "";
	КонецЕсли; 	
КонецФункции

Функция ПараметрыТекстовойСтрокиЧека(Текст = Неопределено, пПереносСтроки = Истина, пВыравнивание = "ЛЕВО")
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТекстоваяСтрока"); 
	ПараметрыСтроки.Вставить("Текст", Текст); 
	ПараметрыСтроки.Вставить("ПереносСтроки", пПереносСтроки);   // Булево - Перенос строки, устанавливается значение по умочанию.  
	ПараметрыСтроки.Вставить("Выравнивание" , пВыравнивание); // Строка - Выравнивание текста, Значения: "Лево", "Право", "Центр".
	Возврат ПараметрыСтроки; 
	
КонецФункции

Функция ПараметрыШтрихкодВСтрокеЧека(ТипШтрихкода = Неопределено, ШтрихКод = Неопределено)
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТипШтрихкода", ТипШтрихкода);
	ПараметрыСтроки.Вставить("ШтрихКод"    , ШтрихКод);
	Возврат ПараметрыСтроки; 
	
КонецФункции

Функция ПараметрыДанныеКоррекции()
	
	ДанныеКоррекции = Новый Структура();
	ДанныеКоррекции.Вставить("ТипКоррекции", 0);   // Число,Обязательно     - Тип коррекции: 0-самостоятельно, 1-по предписанию.
	ДанныеКоррекции.Вставить("ОписаниеКоррекции"); // Строка,Необязательно  - Описание коррекции.
	ДанныеКоррекции.Вставить("ДатаКоррекции");     // ДатаВремя,Обязательно - Дата совершения корректируемого расчета.
	ДанныеКоррекции.Вставить("НомерПредписания");  // Строка,Обязательно    - Номер предписания налогового органа.
	Возврат ДанныеКоррекции; 
	
КонецФункции

Функция ДанныеТекстовогоДокумента(ДанныеДокумента) Экспорт
	
	ДанныеТекстовогоДокумента = РазобратьXMLТекстовыйДокумент(ДанныеДокумента, PositionsШаблонXML());	
	Если ДанныеТекстовогоДокумента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 	
	ПараметрыЧека = Новый Структура;
	ПараметрыЧека.Вставить("Фискальный", Ложь);
	ПараметрыЧека.Вставить("ПозицииЧека", Новый Массив);
	Для Каждого ДанныеСтрокиЧека Из ДанныеТекстовогоДокумента.Positions Цикл
		Если ДанныеСтрокиЧека.Свойство("TextString") Тогда
			
			ПараметрыТекстовойСтроки = ПараметрыТекстовойСтрокиЧека(ДанныеСтрокиЧека.Text);
			ПараметрыЧека.ПозицииЧека.Добавить(ПараметрыТекстовойСтроки);
			
		ИначеЕсли ДанныеСтрокиЧека.Свойство("Barcode") Тогда 
			
			ПараметрыШтрихкода = ПараметрыШтрихкодаПоУмолчанию();
			ПараметрыШтрихкода.Ширина = 200;
			ПараметрыШтрихкода.Высота = 50;
			ПараметрыШтрихкода.Штрихкод = ДанныеСтрокиЧека.Value;
			ПараметрыШтрихкода.УровеньКоррекцииQR = 3;
			ПараметрыШтрихкода.ТипКода = ПолучитьКодШтрихКодаПоИмени(ДанныеСтрокиЧека.Type);
			ПараметрыШтрихкода.УбратьЛишнийФон = Истина;
			ПараметрыШтрихкода.ОтображатьТекст = Ложь;
			
			КартинкаШтрихкода = КартинкаШтрихкода(ПараметрыШтрихкода);
			
			Если КартинкаШтрихкода = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ПараметрыШтрихкодаСтроки = Новый Структура("Штрихкод, Картинка");	
			ПараметрыШтрихкодаСтроки.Картинка = КартинкаШтрихкода;
			ПараметрыЧека.ПозицииЧека.Добавить(ПараметрыШтрихкодаСтроки);
			
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ПараметрыЧека;
	
КонецФункции

Функция ПараметрыЧека1С(ДанныеЧека) Экспорт
	
	ПараметрыЧека1С = РазобратьXMLТекстовыйДокумент(ДанныеЧека, CheckШаблонXML());
	
	Возврат ПараметрыЧека1С;
		
КонецФункции

Функция ПолучитьКодШтрихКодаПоИмени(пИмя) 
	Если пИмя = "EAN8" Тогда
		Возврат 0;
	ИначеЕсли пИмя = "EAN13" Тогда
		Возврат 1;
	ИначеЕсли пИмя = "CODE39" Тогда
		Возврат 3;
	ИначеЕсли пИмя = "QR" Тогда
		Возврат 16;
	КонецЕсли;
КонецФункции

Функция КартинкаШтрихкода(ПараметрыШтрихкода)
	
	ИспользоватьСтарыйСпособПодключения = Истина;
	
	Попытка
		ГенерацияШтрихкодаВызовСервераМодуль = ОбщегоНазначения.ОбщийМодуль("ГенерацияШтрихкодаВызовСервера");
		ИспользоватьСтарыйСпособПодключения = Ложь;
	Исключение
		
	КонецПопытки; 
	
	Если ИспользоватьСтарыйСпособПодключения Тогда
		Если ПараметрыШтрихкода.ТипКода = 16 Тогда
			Попытка
				УправлениеПечатьюМодуль = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
			Исключение
				Возврат Неопределено;
			КонецПопытки;
			
			ДанныеQRКода = УправлениеПечатьюМодуль.ДанныеQRКода(ПараметрыШтрихкода.Штрихкод, ПараметрыШтрихкода.УровеньКоррекцииQR, ПараметрыШтрихкода.Высота);
			
			Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
				Возврат Новый Картинка(ДанныеQRКода);
			КонецЕсли; 
			Возврат Неопределено;
		Иначе
			Возврат ОбщегоНазначения.ОбщийМодуль("МенеджерОборудованияВызовСервера").ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);	
		КонецЕсли; 		
	Иначе
		Попытка
			РезультатФормирования = ГенерацияШтрихкодаВызовСервераМодуль.ИзображениеШтрихкода(ПараметрыШтрихкода);
		Исключение
			РезультатФормирования = Неопределено;
		КонецПопытки;	
	КонецЕсли; 
	
	Если РезультатФормирования <> Неопределено Тогда
		Возврат РезультатФормирования.Картинка;	
	КонецЕсли; 
	
КонецФункции

Функция ПараметрыШтрихкодаПоУмолчанию()
	
	Попытка
		ГенерацияШтрихкодаКлиентСерверМодуль = ОбщегоНазначения.ОбщийМодуль("ГенерацияШтрихкодаКлиентСервер");
		Возврат ГенерацияШтрихкодаКлиентСерверМодуль.ПараметрыГенерацииШтрихкода();
	Исключение
	КонецПопытки;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина"            , 100);
	ПараметрыШтрихкода.Вставить("Высота"            , 100);
	ПараметрыШтрихкода.Вставить("ТипКода"           , 99);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст"   , Истина);
	ПараметрыШтрихкода.Вставить("РазмерШрифта"      , 12);
	ПараметрыШтрихкода.Вставить("УголПоворота"      , 0);
	ПараметрыШтрихкода.Вставить("Штрихкод"          , "");
	ПараметрыШтрихкода.Вставить("ПрозрачныйФон"     , Истина);
	ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 1);
	ПараметрыШтрихкода.Вставить("Масштабировать"           , Ложь);
	ПараметрыШтрихкода.Вставить("СохранятьПропорции"       , Ложь);
	ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание" , 1); 
	ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", 2);
	ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0);
	ПараметрыШтрихкода.Вставить("УбратьЛишнийФон" , Ложь); 
	
	Возврат ПараметрыШтрихкода;
	
КонецФункции

Функция ПолучитьТекстQRКода(пДатаЧека, пСумма, пФН, пФНД, пФП, пТипРасчета)
	ДанныеQRКода 		= "t=%D%&s=%S%&fn=%F%&i=%I%&fp=%P%&n=%T%";
	// Формирование QR кода.
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%D%", Формат(пДатаЧека, "ДФ=yyyyMMddTHHmm"));
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%S%", ФорматЧисла(пСумма));
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%F%", пФН);
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%I%", ЭмуляторKSOFT_ОбщегоНазначения.ФорматЧислаЗаданногоРазмера(пФНД, 4));
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%P%", пФП);
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%T%", пТипРасчета);	
	Возврат ДанныеQRКода;
КонецФункции

Функция ФискальныеДанныеНовогоЧека(ДанныеТекущейСмены) Экспорт
	
	ФискальныеДанные = Новый Структура;
	ФискальныеДанные.Вставить("ДатаВремяЧека", ТекущаяДата());
	ФискальныеДанные.Вставить("ФНД", ДанныеТекущейСмены.CheckNumber);
	ФискальныеДанные.Вставить("ФП", Формат(ЭмуляторKSOFT_ОбщегоНазначения.СлучайноеЧисло(10), "ЧГ="));
	
	Возврат ФискальныеДанные;
	
КонецФункции

Функция ТекущиеДанныеСмены(ИдентификаторОборудования)
	Возврат ПолучитьВременноеЗначениеОборудования("ДанныеСмены_" + ИдентификаторОборудования);	
КонецФункции

Процедура СохранитьТекущиеДанныеСмены(ПараметрыСостояниеСмены, ИдентификаторОборудования)
	СохранитьВременноеЗначениеОборудования("ДанныеСмены_" + ИдентификаторОборудования, ПараметрыСостояниеСмены);
КонецПроцедуры
