Функция ПолучитьНомерВерсии() Экспорт
	Возврат НомерВерсии();
КонецФункции
 
Функция ПолучитьРевизиюИнтерфейса() Экспорт
	Возврат 3002;	
КонецФункции

Функция ПолучитьПараметрыККТ(ПараметрыККТ, ПараметрыДрайвера, ТекстОшибки) Экспорт  //
	
	ПараметрыККТ = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("TableParametersKKT", ЭмуляторKSOFT_ФормированиеЧека.ТекущиеПараметрыККТ(ПараметрыДрайвера.ИдентификаторОборудования));
	
	Возврат Истина;
КонецФункции

Функция ОткрытьСмену(ИДУстройства, ВходныеПараметры, ВыходныеПараметры, ПараметрыДрайвера, ТекстОшибки) Экспорт
	
	ДанныеКассира = ЭмуляторKSOFT_ФормированиеЧека.СтруктураКассира(ВходныеПараметры);
	
	ДанныеСмены = ТекущиеДанныеСмены(ПараметрыДрайвера.ИдентификаторОборудования);
	Если ДанныеСмены = Неопределено Тогда
		ДанныеСмены = ПараметрыСостояниеСмены()
	Иначе
		Если ДанныеСмены.ShiftState = 2 
			ИЛИ ДанныеСмены.ShiftState = 3 Тогда
			ТекстОшибки = "СМЕНА УЖЕ ОТКРЫТА";
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
	ВывестиДополнительныйЧек("СМЕНА ОТКРЫТА", ПараметрыДрайвера, ДанныеКассира);

	ДанныеСмены.ShiftNumber	= ДанныеСмены.ShiftNumber + 1;
	ДанныеСмены.CheckNumber = ДанныеСмены.CheckNumber + 1;
	ДанныеСмены.ShiftState = 2;
	ДанныеСмены.ShiftClosingCheckNumber = 0;
	ДанныеСмены.CashBalance = 0;
	
	Для Каждого Элемент Из ДанныеСмены.CountersOperationType1 Цикл
		ДанныеСмены.CountersOperationType1.Вставить(Элемент.Ключ, 0);
	КонецЦикла; 
	Для Каждого Элемент Из ДанныеСмены.CountersOperationType2 Цикл
		ДанныеСмены.CountersOperationType2.Вставить(Элемент.Ключ, 0);
	КонецЦикла; 
	Для Каждого Элемент Из ДанныеСмены.CountersOperationType3 Цикл
		ДанныеСмены.CountersOperationType3.Вставить(Элемент.Ключ, 0);
	КонецЦикла; 
	Для Каждого Элемент Из ДанныеСмены.CountersOperationType4 Цикл
		ДанныеСмены.CountersOperationType4.Вставить(Элемент.Ключ, 0);
	КонецЦикла; 
	
	СохранитьТекущиеДанныеСмены(ДанныеСмены, ПараметрыДрайвера.ИдентификаторОборудования);
	
	ВыходныеПараметры = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("OutputParameters.Parameters", ДанныеСмены);
	
	Возврат Истина;			   
		
КонецФункции

Функция ЗакрытьСмену(ИДУстройства, ВходныеПараметры, ВыходныеПараметры, ПараметрыДрайвера, ТекстОшибки) Экспорт
	
	ДанныеКассира = ЭмуляторKSOFT_ФормированиеЧека.СтруктураКассира(ВходныеПараметры);
	
	ДанныеСмены = ТекущиеДанныеСмены(ПараметрыДрайвера.ИдентификаторОборудования);
	Если ДанныеСмены = Неопределено Тогда    
		ТекстОшибки = "СМЕНА НЕ ОТКРЫТА";
		Возврат Ложь;
	Иначе
		Если ДанныеСмены.ShiftState = 1 Тогда
			ТекстОшибки = "СМЕНА УЖЕ ЗАКРЫТА";
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
	ВывестиДополнительныйЧек("СМЕНА ЗАКРЫТА", ПараметрыДрайвера, ДанныеКассира);
	
	ДанныеСмены.ShiftState = 1;
	ДанныеСмены.CheckNumber = ДанныеСмены.CheckNumber + 1;
	СохранитьТекущиеДанныеСмены(ДанныеСмены, ПараметрыДрайвера.ИдентификаторОборудования);
	
	ВыходныеПараметры = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("OutputParameters.Parameters", ДанныеСмены);
	
	Возврат Истина;		
	
КонецФункции

Функция НапечататьЧекВнесенияВыемки(ИДУстройства, ВходныеПараметры, пСумма, ПараметрыДрайвера, ТекстОшибки) Экспорт
	
	ДанныеКассира = ЭмуляторKSOFT_ФормированиеЧека.СтруктураКассира(ВходныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(ДанныеКассира) Тогда
		ТекстОшибки = "НЕ ЗАПОЛНЕНА ИНФОРМАЦИ О КАССИРЕ";
		Возврат Ложь;
	КонецЕсли; 
		
	ДанныеСмены = ТекущиеДанныеСмены(ПараметрыДрайвера.ИдентификаторОборудования);
	Если ДанныеСмены = Неопределено Тогда
		ТекстОшибки = "СМЕНА ЗАКРЫТА";
		Возврат Ложь;
	Иначе
		Если ДанныеСмены.ShiftState = 1 Тогда
			ТекстОшибки = "СМЕНА ЗАКРЫТА";
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	ДанныеСмены.CheckNumber = ДанныеСмены.CheckNumber + 1;
	СохранитьТекущиеДанныеСмены(ДанныеСмены, ПараметрыДрайвера.ИдентификаторОборудования);
	Если пСумма > 0 Тогда 
		ВывестиДополнительныйЧек("ИНКАССАЦИЯ ВНЕСЕНИЕ", ПараметрыДрайвера, ДанныеКассира, пСумма);
	Иначе
		ВывестиДополнительныйЧек("ИНКАССАЦИЯ ВЫЕМКА", ПараметрыДрайвера, ДанныеКассира, -пСумма);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НапечататьОтчетБезГашения(ИДУстройства, ВходныеПараметры, ПараметрыДрайвера, ТекстОшибки) Экспорт
	
	ДанныеКассира = ЭмуляторKSOFT_ФормированиеЧека.СтруктураКассира(ВходныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(ДанныеКассира) Тогда
		ТекстОшибки = "НЕ ЗАПОЛНЕНА ИНФОРМАЦИ О КАССИРЕ";
		Возврат Ложь;
	КонецЕсли; 
	
	ДанныеСмены = ТекущиеДанныеСмены(ПараметрыДрайвера.ИдентификаторОборудования);
	Если ДанныеСмены = Неопределено Тогда
		ТекстОшибки = "СМЕНА ЗАКРЫТА";
		Возврат Ложь;
	Иначе
		Если ДанныеСмены.ShiftState = 1 Тогда
			ТекстОшибки = "СМЕНА ЗАКРЫТА";
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
	ДанныеСмены.CheckNumber = ДанныеСмены.CheckNumber + 1;
	СохранитьТекущиеДанныеСмены(ДанныеСмены, ПараметрыДрайвера.ИдентификаторОборудования);

	ВывестиДополнительныйЧек("X-ОТЧЕТ", ПараметрыДрайвера, ДанныеКассира);
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьЧек(ИДУстройства, Электронно, ДанныеЧека, ВыходныеПараметрыДокумента, ПараметрыДрайвера, ТекстОшибки) Экспорт 
	
	ПараметрыДокумента = Неопределено;
	ПараметрыЧекаДляВывода = Неопределено;
	
	РезультатОперации = ЭмуляторKSOFT_ФормированиеЧека.СформироватьИОтправитьЧек(ДанныеЧека, ПараметрыДокумента, ПараметрыЧекаДляВывода, Электронно,, ПараметрыДрайвера, ТекстОшибки);
	
	Если РезультатОперации Тогда
		
		ВывестиЧекНаФорму(ПараметрыЧекаДляВывода, ДанныеЧека, ПараметрыДрайвера);	
		ВыходныеПараметрыДокумента = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("DocumentOutputParameters.Parameters", ПараметрыДокумента);
	
	КонецЕсли; 
	
	Возврат РезультатОперации;
	
КонецФункции

Функция СформироватьЧек2005(ИДУстройства, Электронно, ДанныеЧека, НомерЧека, НомерСмены, ФискальныйПризнак, АдресСайтаПроверки, ПараметрыДрайвера, ТекстОшибки) Экспорт 
	
	ПараметрыДокумента = Неопределено;
	ПараметрыЧекаДляВывода = Неопределено;
	
	РезультатОперации = ЭмуляторKSOFT_ФормированиеЧека.СформироватьИОтправитьЧек(ДанныеЧека, ПараметрыДокумента, ПараметрыЧекаДляВывода, Электронно,,ПараметрыДрайвера, ТекстОшибки);
	
	Если РезультатОперации Тогда
		
		ВывестиЧекНаФорму(ПараметрыЧекаДляВывода, ДанныеЧека, ПараметрыДрайвера);
		
		НомерЧека 			= ПараметрыДокумента.CheckNumber;
		НомерСмены 			= ПараметрыДокумента.ShiftNumber;
		ФискальныйПризнак 	= ПараметрыДокумента.FiscalSign;
		АдресСайтаПроверки 	= ПараметрыДокумента.AddressSiteInspections;
		
	КонецЕсли; 
	
	Возврат РезультатОперации;
	
КонецФункции

Функция СформироватьЧекКоррекции(ИДУстройства, ДанныеЧека, ВыходныеПараметрыДокумента, ПараметрыДрайвера, ТекстОшибки) Экспорт

	ПараметрыДокумента = Неопределено;
	ПараметрыЧекаДляВывода = Неопределено;
	
	РезультатОперации = ЭмуляторKSOFT_ФормированиеЧека.СформироватьИОтправитьЧек(ДанныеЧека, ПараметрыДокумента, ПараметрыЧекаДляВывода, Ложь, Истина, ПараметрыДрайвера, ТекстОшибки);
	
	Если РезультатОперации Тогда
		ВывестиЧекНаФорму(ПараметрыЧекаДляВывода, ДанныеЧека, ПараметрыДрайвера);
		ВыходныеПараметрыДокумента = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("DocumentOutputParameters.Parameters", ПараметрыДокумента);
	КонецЕсли; 
	
	Возврат РезультатОперации;
КонецФункции

Функция СформироватьЧекКоррекции2005(ИДУстройства, ДанныеЧека, НомерЧекаККТ, НомерСменыККТ, ФискальныйПризнак, АдресСайтаПроверки, ПараметрыДрайвера, ТекстОшибки) Экспорт 
		
	ПараметрыДокумента = Неопределено;
	ПараметрыЧекаДляВывода = Неопределено;
	
	РезультатОперации = ЭмуляторKSOFT_ФормированиеЧека.СформироватьИОтправитьЧек(ДанныеЧека, ПараметрыДокумента, ПараметрыЧекаДляВывода, Ложь, Истина, ПараметрыДрайвера, ТекстОшибки);
	
	Если РезультатОперации Тогда
		
		ВывестиЧекНаФорму(ПараметрыЧекаДляВывода, ДанныеЧека, ПараметрыДрайвера);
		
		НомерЧекаККТ 		= ПараметрыДокумента.CheckNumber;
		НомерСменыККТ 		= ПараметрыДокумента.ShiftNumber;
		ФискальныйПризнак 	= ПараметрыДокумента.FiscalSign;
		АдресСайтаПроверки 	= ПараметрыДокумента.AddressSiteInspections;
	КонецЕсли; 
	
	Возврат РезультатОперации;

КонецФункции
 
Функция НапечататьТекстовыйДокумент(ИДУстройства, ДанныеДокумента, ПараметрыДрайвера, ТекстОшибки) Экспорт
		
	ПараметрыЧека = ЭмуляторKSOFT_ФормированиеЧека.ДанныеТекстовогоДокумента(ДанныеДокумента);
	Если ПараметрыЧека = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 	
	
	ВывестиЧекНаФорму(ПараметрыЧека, ДанныеДокумента, ПараметрыДрайвера);
	
	Возврат Истина;
КонецФункции

Функция ПолучитьТекущееСостояние(ИДУстройства, ВходныеПараметры, ВыходныеПараметры, ПараметрыДрайвера, ТекстОшибки) Экспорт
	
	ДанныеСмены = ТекущиеДанныеСмены(ПараметрыДрайвера.ИдентификаторОборудования);
	Если ДанныеСмены = Неопределено Тогда
		ДанныеСмены = ПараметрыСостояниеСмены();
		ДанныеСмены.ShiftState = 1;
	КонецЕсли; 	
	
	ВыходныеПараметры = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("OutputParameters.Parameters", ДанныеСмены);
	
	Возврат Истина;	
	
КонецФункции

//Недоработка со стороны разработчиков для веб-клиента
Функция ПолучитьТекущееСостояние2005(ИДУстройства, НомерЧека, НомерСмены, СтатусСмены, ПараметрыСостояния, ПараметрыДрайвера, ТекстОшибки) Экспорт //Для ревизии 2005
		
	ДанныеСмены = ТекущиеДанныеСмены(ПараметрыДрайвера.ИдентификаторОборудования);
	Если ДанныеСмены = Неопределено Тогда
		ДанныеСмены = ПараметрыСостояниеСмены();
		ДанныеСмены.ShiftState = 1;
	КонецЕсли; 
	
	НомерЧека = ДанныеСмены.CheckNumber;
	НомерСмены = ДанныеСмены.ShiftNumber;
	СтатусСмены = ДанныеСмены.ShiftState; 
	ПараметрыСостоянияСтруктура = Новый Структура("BacklogDocumentsCounter, BacklogDocumentFirstNumber, BacklogDocumentFirstDateTime");
	ЗаполнитьЗначенияСвойств(ПараметрыСостоянияСтруктура, ДанныеСмены);
	ПараметрыСостояния = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("StatusParameters.Parameters", ПараметрыСостоянияСтруктура);
	
	Возврат Истина;	
	
КонецФункции
		
Функция ПолучитьДополнительныеДействия(ДополнительныеДействия, ТекстОшибки) Экспорт
	ДополнительныеДействия = 
	"<?xml version=""1.0"" encoding=""windows-1251""?>
	|<Actions> 
	|	<Action Name=""Test"" Caption=""Тестовая операция""/>
	|	<Action Name=""OpenShift"" Caption=""Открыть смену""/>
	|	<Action Name=""CloseShift"" Caption=""Закрыть смену""/>
	|</Actions>";	
КонецФункции

Функция ТестУстройства(Описание, АктивированДемоРежим, ТекстОшибки) Экспорт 
		
	АктивированДемоРежим = "";
	РезультатЗапроса = Неопределено;
	Описание = "Успешное подключение.";
	Возврат Истина;
	
КонецФункции

Функция Подключить(пИДУстройства, ПараметрыДрайвера, ТекстОшибки) Экспорт	
			
	Если НЕ ЭмуляторKSOFT_ОбщегоНазначения.СтандартПоддерживается() Тогда
		ТекстОшибки = "ВЕРСИЯ БИБЛИОТЕКИ ПОДКЛЮЧАЕМОГО ОБОРУДОВАНИЯ НИЖЕ 2.1.3, КОНФИГУРАЦИЯ НЕ ПОДДЕРЖИВАЕТСЯ";
		Возврат Ложь;
	КонецЕсли; 
	
	ЭмуляторKSOFT_ФормированиеЧека.Подключить(ПараметрыДрайвера);
		
	пИДУстройства = 0;
	Возврат Истина;
	
КонецФункции

Функция Отключить(ИДУстройства, ТекстОшибки) Экспорт
	
	пИДУстройства = 0;
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОписание(ОписаниеДрайвера, ТекстОшибки) Экспорт
	
	ОписаниеДрайвера = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("DriverDescription", ОписаниеДрайвераСтруктура());		
	
	Возврат Истина;
КонецФункции

//Недоработка со стороны разработчиков для веб-клиента
Функция ПолучитьОписание2005(Наименование, Описание, ТипОборудования, 
							РевизияИнтерфейса, ИнтеграционныйКомпонент, ОсновнойДрайверУстановлен, 
							URLЗагрузкиДрайвера, ТекстОшибки) Экспорт
								
	ОписаниеДрайвераСтруктура 		= ЭмуляторKSOFT_ПодключаемоеОборудованиеКлиент.ОписаниеДрайвераСтруктура();	
	Наименование  					= ОписаниеДрайвераСтруктура.Name;
	Описание 						= ОписаниеДрайвераСтруктура.Description;
	ТипОборудования 				= ОписаниеДрайвераСтруктура.EquipmentType;
	РевизияИнтерфейса 				= ЭмуляторKSOFT_ПодключаемоеОборудованиеКлиент.ПолучитьРевизиюИнтерфейса();
	ИнтеграционныйКомпонент 		= ОписаниеДрайвераСтруктура.IntegrationComponent;
	ОсновнойДрайверУстановлен 		= ОписаниеДрайвераСтруктура.MainDriverInstalled;
	URLЗагрузкиДрайвера 			= ОписаниеДрайвераСтруктура.DownloadURL;
	
	Возврат Истина;
КонецФункции

Функция ОткрытьДенежныйЯщик(ИДУстройства, ПараметрыДрайвера, ТекстОшибки) Экспорт
		
	ВывестиДополнительныйЧек("ДЕНЕЖНЫЙ ЯЩИК ОТКРЫТ", ПараметрыДрайвера);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПараметры(ПараметрыДрайвера, ИдентификаторОборудования, ТекстОшибки) Экспорт
	
	ПараметрыДрайвера = ЭмуляторKSOFT_ФормированиеЧека.ПроставитьЗначенияПоУмолчаниюПараметров(ПараметрыДрайвераXML(), ИдентификаторОборудования);
	
КонецФункции

Функция ОтчетОТекущемСостоянииРасчетов(ИДУстройства, ВходныеПараметры, ВыходныеПараметры, ПараметрыДрайвера, ТекстОшибки) Экспорт
		
	ДанныеКассира = ЭмуляторKSOFT_ФормированиеЧека.СтруктураКассира(ВходныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(ДанныеКассира) Тогда
		ТекстОшибки = "НЕ ЗАПОЛНЕНА ИНФОРМАЦИ О КАССИРЕ";
		Возврат Ложь;
	КонецЕсли; 
	
	ДанныеСмены = ТекущиеДанныеСмены(ПараметрыДрайвера.ИдентификаторОборудования);
	Если ДанныеСмены = Неопределено Тогда
		ТекстОшибки = "СМЕНА ЗАКРЫТА";
		Возврат Ложь;
	Иначе
		Если ДанныеСмены.ShiftState = 1 Тогда
			ТекстОшибки = "СМЕНА ЗАКРЫТА";
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
	ДанныеСмены.CheckNumber = ДанныеСмены.CheckNumber + 1;
	СохранитьТекущиеДанныеСмены(ДанныеСмены, ПараметрыДрайвера.ИдентификаторОборудования);

	ВывестиДополнительныйЧек("ТЕКУЩИЕ РАСЧЕТЫ", ПараметрыДрайвера, ДанныеКассира);
	
	Возврат Истина;	
	
КонецФункции

Функция ПолучитьШиринуСтроки(ИДУстройства, ШиринаСтроки, ТекстОшибки) Экспорт
	
	ШиринаСтроки = 32;	
	
	Возврат Истина;	
	
КонецФункции

Функция ОперацияФН(ИДУстройства, ТипОперации, ПараметрыФискализацииXML, ПараметрыДрайвера, ТекстОшибки) Экспорт
		
	ЭмуляторKSOFT_ФормированиеЧека.ОперацияФН(ПараметрыФискализацииXML, ПараметрыДрайвера.ИдентификаторОборудования);
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьДополнительноеДействие(пИмяДействия, ПараметрыДрайвера, ТекстОшибки) Экспорт
	
	Если ВРег(пИмяДействия) = "TEST" Тогда
		Возврат Истина;	
	ИначеЕсли Врег(пИмяДействия) = "OPENSHIFT" Тогда
		Возврат ОткрытьСмену(0, Неопределено, Неопределено, ПараметрыДрайвера, ТекстОшибки);
	ИначеЕсли Врег(пИмяДействия) = "CLOSESHIFT" Тогда 	
		Возврат ЗакрытьСмену(0, Неопределено, Неопределено, ПараметрыДрайвера, ТекстОшибки);
	КонецЕсли; 
	
	Возврат Ложь;
КонецФункции

Функция НапечататьКопиюЧека(ИДУстройства, НомерЧека, ТекстОшибки) Экспорт
	
	ТекстОшибки = "КОМАНДА НЕ ПОДДЕРЖИВАЕТСЯ";
	
	Возврат Ложь;

КонецФункции

Функция НапечататьПоследнийЧек(ИмяОперации, ТекстОшибки)
	
	ТекстОшибки = "КОМАНДА НЕ ПОДДЕРЖИВАЕТСЯ";
	
	Возврат Ложь;
	
КонецФункции

Функция ОписаниеДрайвераСтруктура() Экспорт 
	ПараметрыОписанияДрайвера = Новый Структура;
	ПараметрыОписанияДрайвера.Вставить("Name", "1C: Эмулятор контрольно-кассовой техники нового образца c функций эквайринговых операций");
	ПараметрыОписанияДрайвера.Вставить("Description", "1C: Эмулятор контрольно-кассовой техники нового образца c функций эквайринговых операций для подключения к ""1С:Предприятие""");
	ПараметрыОписанияДрайвера.Вставить("EquipmentType", "ККТ");
	ПараметрыОписанияДрайвера.Вставить("IntegrationComponent", Истина);
	ПараметрыОписанияДрайвера.Вставить("MainDriverInstalled", Истина);
	ПараметрыОписанияДрайвера.Вставить("DriverVersion", НомерВерсии());
	ПараметрыОписанияДрайвера.Вставить("IntegrationComponentVersion", НомерВерсии());	
	ПараметрыОписанияДрайвера.Вставить("DownloadURL", "");
	ПараметрыОписанияДрайвера.Вставить("LogIsEnabled", Ложь);
	ПараметрыОписанияДрайвера.Вставить("LogPath", "");
	
	Возврат ПараметрыОписанияДрайвера;
КонецФункции
 
Функция НомерВерсии()
	Возврат "1.06";
КонецФункции
 
Функция ПараметрыСостояниеСмены()
	ПараметрыСостояниеСмены = Новый Структура;
	ПараметрыСостояниеСмены.Вставить("ShiftNumber", 0); //Номер открытой смены/Номер закрытой смены
	ПараметрыСостояниеСмены.Вставить("CheckNumber", 0); //Номер последнего фискального документа
	ПараметрыСостояниеСмены.Вставить("ShiftClosingCheckNumber", 0); //Номер последнего чека за смену
	ПараметрыСостояниеСмены.Вставить("DateTime", ""); //Сделано строкой, так как сразу будет передано в 1С в виде XML, Дата и время формирования фискального документа
	ПараметрыСостояниеСмены.Вставить("ShiftState", 1); //Состояние смены 1 - Закрыта 2 - Открыта 3 - Истекла
	ПараметрыСостояниеСмены.Вставить("CountersOperationType1", СчетчикЧековПоТипу()); //Счетчики операций по типу "приход" (код 1, Таблица 25 документа ФФД)
	ПараметрыСостояниеСмены.Вставить("CountersOperationType2", СчетчикЧековПоТипу()); //Счетчики операций по типу "возврат прихода" (код 2, Таблица 25 документа ФФД)
	ПараметрыСостояниеСмены.Вставить("CountersOperationType3", СчетчикЧековПоТипу()); //Счетчики операций по типу "расход" (код 3, Таблица 25 документа ФФД)
	ПараметрыСостояниеСмены.Вставить("CountersOperationType4", СчетчикЧековПоТипу()); //Счетчики операций по типу "возврат расхода"(код 4, Таблица 25 документа ФФД)
	ПараметрыСостояниеСмены.Вставить("CashBalance", 0.00); //Остаток наличных денежных средств в кассе
	
	ПараметрыСостояниеСмены.Вставить("BacklogDocumentsCounter", 0); //Количество непереданных документов
	ПараметрыСостояниеСмены.Вставить("BacklogDocumentFirstNumber", 0); //Номер первого непереданного документа
	ПараметрыСостояниеСмены.Вставить("BacklogDocumentFirstDateTime", '00010101'); //Дата и время первого из непереданных документов
	
	ПараметрыСостояниеСмены.Вставить("FNError", Ложь); //Необходимо заменить фн
	ПараметрыСостояниеСмены.Вставить("FNOverflow", Ложь); //Признак переполнения памяти ФН
	ПараметрыСостояниеСмены.Вставить("FNFail", Ложь); //Признак исчерпания ресурса ФН
	Возврат ПараметрыСостояниеСмены;
КонецФункции

Функция СчетчикЧековПоТипу()
	СчетчикЧековПоТипу = Новый Структура;
	СчетчикЧековПоТипу.Вставить("CheckCount", 0); //	Количество чеков по операции данного типа
	СчетчикЧековПоТипу.Вставить("TotalChecksAmount", 0.00); //Итоговая сумма чеков по операциям данного типа
	СчетчикЧековПоТипу.Вставить("CorrectionCheckCount", 0); //Количество чеков коррекции по операции данного типа
	СчетчикЧековПоТипу.Вставить("TotalCorrectionChecksAmount", 0.00); //Итоговая сумма чеков коррекции по операциям данного типа
	Возврат СчетчикЧековПоТипу;
КонецФункции

Функция ТекущиеДанныеСмены(ИдентификаторОборудования)
	Возврат ПолучитьВременноеЗначениеОборудования("ДанныеСмены_" + ИдентификаторОборудования);	
КонецФункции

Процедура СохранитьТекущиеДанныеСмены(ПараметрыСостояниеСмены, ИдентификаторОборудования)
	СохранитьВременноеЗначениеОборудования("ДанныеСмены_" + ИдентификаторОборудования, ПараметрыСостояниеСмены);
КонецПроцедуры
 
Процедура ВывестиДополнительныйЧек(ТипОперации, ПараметрыДрайвера, ДанныеКассира = Неопределено, Сумма = 0)
	
	Если НЕ ПараметрыДрайвера.Свойство("WindowShowType") ИЛИ ПараметрыДрайвера.WindowShowType = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДопЧека = Новый Структура;
	ПараметрыДопЧека.Вставить("Интервал", ИнтервалОтображенияЧека(ПараметрыДрайвера));
	ПараметрыДопЧека.Вставить("ДокументЧекККМ", ЭмуляторKSOFT_ФормированиеЧека.ТекстовыйДокументЧек(ДанныеКассира, ТипОперации, Сумма, ПараметрыДрайвера.ИдентификаторОборудования));
	
	Если ПараметрыДрайвера.Свойство("TypeOpenWindow") И ПараметрыДрайвера.TypeOpenWindow = 1 Тогда
		ОткрытьФорму("ОбщаяФорма.ЭмуляторKSOFT_ДополнительныйЧек", ПараметрыДопЧека,,,,,,РежимОткрытияОкнаФормы.Независимый);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ЭмуляторKSOFT_ДополнительныйЧек", ПараметрыДопЧека,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 			
		
КонецПроцедуры

Функция ИнтервалОтображенияЧека(ПараметрыДрайвера)
	
	Если ПараметрыДрайвера.WindowShowType = 1 Тогда
		Возврат 0;
	ИначеЕсли ПараметрыДрайвера.WindowShowType = 2 Тогда 
		Возврат 5;
	ИначеЕсли ПараметрыДрайвера.WindowShowType = 3 Тогда 
		Возврат 15;
	ИначеЕсли ПараметрыДрайвера.WindowShowType = 4 Тогда 
		Возврат 30;
	ИначеЕсли ПараметрыДрайвера.WindowShowType = 5 Тогда 
		Возврат 60;
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

Процедура ВывестиЧекНаФорму(ДанныеЧекаДляПечати, Знач XMLПредварительныйЧек, ПараметрыДрайвера)
	
	Область_Печати = Ложь; // Это демо
	
	Если НЕ ПараметрыДрайвера.Свойство("WindowShowType") ИЛИ ПараметрыДрайвера.WindowShowType = 0 Тогда
		Возврат;
	КонецЕсли;

	ПредварительныйЧек = ЭмуляторKSOFT_ФормированиеЧека.РаспечататьПредварительныйЧек(ДанныеЧекаДляПечати);
	Если ПредварительныйЧек = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Область_Печати Тогда  // Это демо
		XMLПредварительныйЧек = "";
	КонецЕсли; 
	
	ПараметрыДопЧека = Новый Структура("ПредварительныйЧек, XMLПредварительныйЧек, Интервал", 
		ПредварительныйЧек, XMLПредварительныйЧек, ИнтервалОтображенияЧека(ПараметрыДрайвера));
	
	Если ПараметрыДрайвера.Свойство("TypeOpenWindow") И ПараметрыДрайвера.TypeOpenWindow = 1 Тогда
		ОткрытьФорму("ОбщаяФорма.ЭмуляторKSOFT_Чек", ПараметрыДопЧека,,,,,,РежимОткрытияОкнаФормы.Независимый);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ЭмуляторKSOFT_Чек", ПараметрыДопЧека,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 								
	
КонецПроцедуры

Процедура СохранитьВременноеЗначениеОборудования(ИмяПараметра, ЗначениеПараметра)
	ЭмуляторKSOFT_ОбщегоНазначения.СохранитьВременноеЗначениеОборудования(ИмяПараметра, ЗначениеПараметра);
КонецПроцедуры
 
Функция ПолучитьВременноеЗначениеОборудования(ИмяПараметра)
	Возврат ЭмуляторKSOFT_ОбщегоНазначения.ПолучитьВременноеЗначениеОборудования(ИмяПараметра);
КонецФункции

Функция ПараметрыДрайвераXML()
	Возврат
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<Settings>
	|   <Page Caption=""Параметры устройства"">
	|      <Group Caption=""Параметры подключения"">
	|         <Parameter Name=""WindowShowType"" Caption=""Отображение окна эмулируемого чека на экране"" TypeValue=""Number"" DefaultValue=""2"" Description=""Отображение окна эмулируемого чека на экране"">
	|            <ChoiceList>
	|               <Item Value=""0"">Не показывать</Item>
	|               <Item Value=""1"">Показывать всегда</Item>
	|               <Item Value=""2"">Скрывать через 5 секунд</Item>
	|               <Item Value=""3"">Скрывать через 15 секунд</Item>
	|               <Item Value=""4"">Скрывать через 30 секунд</Item>
	|               <Item Value=""5"">Скрывать через 60 секунд</Item>
	|            </ChoiceList>
	|         </Parameter>
	|         <Parameter Name=""TypeOpenWindow"" Caption=""Способ открытия окна с чеком"" TypeValue=""Number"" DefaultValue=""0"" Description=""Способ открытия окна с чеком"">
	|            <ChoiceList>
	|               <Item Value=""0"">Открывать поверх основного окна</Item>
	|               <Item Value=""1"">Открывать независимо</Item>
	|            </ChoiceList>
	|         </Parameter>
	|      </Group>
	|   </Page>
	|   <Page Caption=""ФН/Основное"">
	|      <Group Caption=""Основное"">
	|         <Parameter Name=""KKTNumber"" Caption=""Регистрационный номер ККТ"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|         <Parameter Name=""KKTSerialNumber"" Caption=""Заводской номер ККТ"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|         <Parameter Name=""FNSerialNumber"" Caption=""Заводской номер ФН"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|      </Group>
	|      <Group Caption=""Реквизиты организации"">
	|         <Parameter Name=""CompanyName"" Caption=""Название организации"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|         <Parameter Name=""INN"" Caption=""ИНН организация"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|         <Parameter Name=""SaleAddress"" Caption=""Адрес проведения расчетов"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|         <Parameter Name=""SaleLocation"" Caption=""Место проведения расчетов"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|         <Parameter Name=""TaxationSystems"" Caption=""Коды системы налогообложения"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|      </Group>
	|      <Group Caption=""ОФД"">
	|         <Parameter Name=""OFDCompany"" Caption=""Название организации ОФД"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|         <Parameter Name=""OFDCompanyINN"" Caption=""ИНН организации ОФД"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|         <Parameter Name=""SenderEmail"" Caption=""EMail отправителя чека"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|         <Parameter Name=""FNSURL"" Caption=""Адрес сайта ФНС"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|      </Group>
	|   </Page>
	|   <Page Caption=""ФН/Режимы работы"">
	|      <Group Caption=""Основное"">
	|         <Parameter Name=""IsOffline"" Caption=""Признак автономного режима"" TypeValue=""Boolean"" ReadOnly=""False"" DefaultValue=""False"" />
	|         <Parameter Name=""IsEncrypted"" Caption=""Признак шифрование данных"" TypeValue=""Boolean"" ReadOnly=""False"" DefaultValue=""False"" />
	|         <Parameter Name=""IsService"" Caption=""Признак расчетов за услуги"" TypeValue=""Boolean"" ReadOnly=""False"" DefaultValue=""False"" />
	|         <Parameter Name=""IsExcisable"" Caption=""Продажа подакцизного товара"" TypeValue=""Boolean"" ReadOnly=""False"" DefaultValue=""False"" />
	|         <Parameter Name=""IsGambling"" Caption=""Признак проведения азартных игр"" TypeValue=""Boolean"" ReadOnly=""False"" DefaultValue=""False"" />
	|         <Parameter Name=""IsLottery"" Caption=""Признак проведения лотереи"" TypeValue=""Boolean"" ReadOnly=""False"" DefaultValue=""False"" />
	|         <Parameter Name=""AgentTypes"" Caption=""Коды признаков агента"" TypeValue=""Boolean"" ReadOnly=""False"" DefaultValue="""" />
	|         <Parameter Name=""BSOSing"" Caption=""Признак формирования АС БСО"" TypeValue=""Boolean"" ReadOnly=""False"" DefaultValue=""False"" />
	|         <Parameter Name=""IsOnlineOnly"" Caption=""Признак ККТ для расчетов только в Интернет"" TypeValue=""Boolean"" ReadOnly=""False"" DefaultValue=""False"" />
	|         <Parameter Name=""IsAutomaticPrinter"" Caption=""Признак установки принтера в автомате"" TypeValue=""Boolean"" ReadOnly=""False"" DefaultValue=""False"" />
	|         <Parameter Name=""IsAutomatic"" Caption=""Признак автоматического режима"" TypeValue=""Boolean"" ReadOnly=""False"" DefaultValue=""False"" />
	|         <Parameter Name=""AutomaticNumber"" Caption=""Номер автомата для автоматического режима"" TypeValue=""String"" ReadOnly=""False"" DefaultValue="""" />
	|      </Group>
	|   </Page>
	|</Settings>";
КонецФункции
 
Функция ОбъектДрайвераЭмулятор(ДанныеОборудования) Экспорт
	
	ОбъектДрайвера = ПолучитьФорму("ОбщаяФорма.ЭмуляторKSOFT_ОбъектДрайвера",,,Новый УникальныйИдентификатор);
	ОбъектДрайвера.ПараметрыДрайвера = СкопироватьПараметрыДрайвера(ДанныеОборудования.Параметры, ДанныеОборудования.Ссылка);
	
	Возврат ОбъектДрайвера;
	
КонецФункции

Функция ПроверкаОборудованияПройдена(ДанныеОборудования) Экспорт 
	
	Если ДанныеОборудования.ИдентификаторОбъекта <> "Addin.KSOFT_EmulatorKKT" Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДанныеОборудования.ДрайверОборудования];
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	ОбъектДрайвера.ПараметрыДрайвера = СкопироватьПараметрыДрайвера(ДанныеОборудования.Параметры, ДанныеОборудования.Ссылка);
	
	Возврат Ложь;
	
КонецФункции
 
Функция СкопироватьПараметрыДрайвера(Параметры, СсылкаНаОборудование)
	ПараметрыОбъектаДрайвера = Новый Структура;
	Для Каждого Элемент Из Параметры Цикл
		Если Лев(Элемент.Ключ, 2) = "P_" Тогда
			ПараметрыОбъектаДрайвера.Вставить(Сред(Элемент.Ключ, 3), Элемент.Значение);
		КонецЕсли; 
	КонецЦикла; 	
	ПараметрыОбъектаДрайвера.Вставить("ИдентификаторОборудования", ЭмуляторKSOFT_ОбщегоНазначения.ИдентификаторКлиента(СсылкаНаОборудование));
	Возврат ПараметрыОбъектаДрайвера;
КонецФункции
 


 