//ENGLISH 

Функция GetVersion() Экспорт
	Возврат ПолучитьНомерВерсии()	
КонецФункции
 
Функция GetInterfaceRevision() Экспорт
	Возврат ПолучитьРевизиюИнтерфейса();	
КонецФункции
 
Функция GetDataKKT(ИДУстройства, ПараметрыККТ) Экспорт //
	Возврат ПолучитьПараметрыККТ(ИДУстройства, ПараметрыККТ);		
КонецФункции

Функция OpenShift(ИДУстройства, ВходныеПараметры, ВыходныеПараметры) Экспорт
	Возврат ОткрытьСмену(ИДУстройства, ВходныеПараметры, ВыходныеПараметры);
КонецФункции

Функция CloseShift(ИДУстройства, ВходныеПараметры, ВыходныеПараметры) Экспорт
	Если НЕ 1 = 1 Тогда
		Сч = "Сервис";
	КонецЕсли; 
	Возврат ЗакрытьСмену(ИДУстройства, ВходныеПараметры, ВыходныеПараметры);
КонецФункции

Функция ProcessCheck(ИДУстройства, Электронно, ДанныеЧека, ВыходныеПараметрыДокумента) Экспорт
	Возврат СформироватьЧек(ИДУстройства, Электронно, ДанныеЧека, ВыходныеПараметрыДокумента); 
КонецФункции

Функция ProcessCorrectionCheck(ИДУстройства, ДанныеЧека, ВыходныеПараметрыДокумента) Экспорт
	Возврат СформироватьЧекКоррекции(ИДУстройства, ДанныеЧека, ВыходныеПараметрыДокумента);
КонецФункции

Функция PrintTextDocument(ИДУстройства, ДанныеДокумента) Экспорт
	Возврат НапечататьТекстовыйДокумент(ИДУстройства, ДанныеДокумента);
КонецФункции

Функция CashInOutcome(ИДУстройства, ВходныеПараметры, пСумма) Экспорт
	Возврат НапечататьЧекВнесенияВыемки(ИДУстройства, ВходныеПараметры, пСумма);		
КонецФункции

Функция PrintXReport(ИДУстройства, ВходныеПараметры) Экспорт
	Возврат НапечататьОтчетБезГашения(ИДУстройства, ВходныеПараметры);
КонецФункции

Функция GetCurrentStatus(ИДУстройства, ВходныеПараметры, ВыходныеПараметры) Экспорт
	Возврат ПолучитьТекущееСостояние(ИДУстройства, ВходныеПараметры, ВыходныеПараметры); 
КонецФункции
   
Функция GetAdditionalActions(ДополнительныеДействия) Экспорт
	Возврат ПолучитьДополнительныеДействия(ДополнительныеДействия);	
КонецФункции

Функция DeviceTest(Описание, АктивированДемоРежим) Экспорт 
	Возврат ТестУстройства(Описание, АктивированДемоРежим);			
КонецФункции

Функция Open(пИДУстройства) Экспорт	
	Возврат Подключить(пИДУстройства);
КонецФункции

Функция Close(ИДУстройства) Экспорт
	Возврат Отключить(ИДУстройства);
КонецФункции

Функция GetLastError(пИнформацияОбОшибке) Экспорт
	Возврат ПолучитьОшибку(пИнформацияОбОшибке);
КонецФункции

Функция GetDescription(ОписаниеДрайвера) Экспорт
	
	Возврат ПолучитьОписание(ОписаниеДрайвера); 
	
КонецФункции

Функция OpenCashDrawer(ИДУстройства) Экспорт
	Возврат ОткрытьДенежныйЯщик(ИДУстройства);
КонецФункции

Функция GetParameters(ПараметрыДрайвера) Экспорт
	Возврат ПолучитьПараметры(ПараметрыДрайвера);
КонецФункции

Функция ReportCurrentStatusOfSettlements(ИДУстройства, ВходныеПараметры, ВыходныеПараметры) Экспорт
	Возврат ОтчетОТекущемСостоянииРасчетов(ИДУстройства, ВходныеПараметры, ВыходныеПараметры);	
КонецФункции

Функция SetParameter(ИмяПараметра, ЗначениеПараметра) Экспорт
	Возврат УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
КонецФункции

Функция GetLineLength(ИДУстройства, ШиринаСтроки) Экспорт
	Возврат ПолучитьШиринуСтроки(ИДУстройства, ШиринаСтроки);
КонецФункции

Функция OperationFN(ИДУстройства, ТипОперации, ПараметрыФискализацииXML) Экспорт
	Возврат ОперацияФН(ИДУстройства, ТипОперации, ПараметрыФискализацииXML);
КонецФункции

Функция DoAdditionalAction(пИмяДействия) Экспорт
	Возврат ВыполнитьДополнительноеДействие(пИмяДействия);
КонецФункции

Функция PrintCheckCopy(ИДУстройства, НомерЧека) Экспорт
	Возврат НапечататьКопиюЧека(ИДУстройства, НомерЧека);		
КонецФункции

//ENGLISH 

Функция ПолучитьНомерВерсии() Экспорт
	Возврат "1.06";
КонецФункции
 
Функция ПолучитьРевизиюИнтерфейса() Экспорт
	Возврат 3002;	
КонецФункции

Функция ПолучитьПараметрыККТ(ИДУстройства, ПараметрыККТ) Экспорт  //
	
	ИнициализацияПервичныхПараметров("ПОЛУЧИТЬ ПАРАМЕТРЫ ККТ");
	
	ПараметрыККТ = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("Parameters", ЭмуляторKSOFT_ФормированиеЧека.ТекущиеПараметрыККТ());
	//Возможно в будущем нужно поменять на "TableParametersKKT"
	//Но пока это не поддерживается на уровне конфигураций
	
	Возврат Истина;
КонецФункции

Функция ОткрытьСмену(ИДУстройства, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	ИнициализацияПервичныхПараметров("ОТКРЫТИЕ СМЕНЫ");	
	ДанныеКассира = СтруктураКассира(ВходныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(ДанныеКассира) Тогда
		СохранитьВременноеЗначениеОборудования("ТекстОшибки", "НЕ ЗАПОЛНЕНА ИНФОРМАЦИ О КАССИРЕ");
		Возврат Ложь;
	КонецЕсли; 
	
	ДанныеСмены = ТекущиеДанныеСмены();
	Если ДанныеСмены = Неопределено Тогда
		ДанныеСмены = ПараметрыСостояниеСмены()
	Иначе
		Если ДанныеСмены.ShiftState = 2 
			ИЛИ ДанныеСмены.ShiftState = 3 Тогда
			СохранитьВременноеЗначениеОборудования("ТекстОшибки", "СМЕНА УЖЕ ОТКРЫТА");
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
	ВывестиДополнительныйЧек("СМЕНА ОТКРЫТА", ДанныеКассира);

	ДанныеСмены.ShiftNumber	= ДанныеСмены.ShiftNumber + 1;
	ДанныеСмены.CheckNumber = ДанныеСмены.CheckNumber + 1;
	ДанныеСмены.ShiftState = 2;
	ДанныеСмены.ShiftClosingCheckNumber = 0;
	ДанныеСмены.CashBalance = 0;
	
	Для Каждого Элемент Из ДанныеСмены.CountersOperationType1 Цикл
		ДанныеСмены.CountersOperationType1.Вставить(Элемент.Ключ, 0);
	КонецЦикла; 
	Для Каждого Элемент Из ДанныеСмены.CountersOperationType2 Цикл
		ДанныеСмены.CountersOperationType2.Вставить(Элемент.Ключ, 0);
	КонецЦикла; 
	Для Каждого Элемент Из ДанныеСмены.CountersOperationType3 Цикл
		ДанныеСмены.CountersOperationType3.Вставить(Элемент.Ключ, 0);
	КонецЦикла; 
	Для Каждого Элемент Из ДанныеСмены.CountersOperationType4 Цикл
		ДанныеСмены.CountersOperationType4.Вставить(Элемент.Ключ, 0);
	КонецЦикла; 
	
	СохранитьТекущиеДанныеСмены(ДанныеСмены);
	
	ВыходныеПараметры = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("OutputParameters.Parameters", ДанныеСмены);
	
	Возврат Истина;			   
		
КонецФункции

Функция ЗакрытьСмену(ИДУстройства, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	ИнициализацияПервичныхПараметров("ЗАКРЫТИЕ СМЕНЫ");	
	ДанныеКассира = СтруктураКассира(ВходныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(ДанныеКассира) Тогда
		СохранитьВременноеЗначениеОборудования("ТекстОшибки", "НЕ ЗАПОЛНЕНА ИНФОРМАЦИ О КАССИРЕ");
		Возврат Ложь;
	КонецЕсли; 
	
	ДанныеСмены = ТекущиеДанныеСмены();
	Если ДанныеСмены = Неопределено Тогда
		СохранитьВременноеЗначениеОборудования("ТекстОшибки", "СМЕНА НЕ ОТКРЫТА");
		Возврат Ложь;
	Иначе
		Если ДанныеСмены.ShiftState = 1 Тогда
			СохранитьВременноеЗначениеОборудования("ТекстОшибки", "СМЕНА УЖЕ ЗАКРЫТА");
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
	ВывестиДополнительныйЧек("СМЕНА ЗАКРЫТА", ДанныеКассира);
	
	ДанныеСмены.ShiftState = 1;
	ДанныеСмены.CheckNumber = ДанныеСмены.CheckNumber + 1;
	СохранитьТекущиеДанныеСмены(ДанныеСмены);
	
	ВыходныеПараметры = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("OutputParameters.Parameters", ДанныеСмены);
	
	Возврат Истина;		
	
КонецФункции

Функция НапечататьЧекВнесенияВыемки(ИДУстройства, ВходныеПараметры, пСумма) Экспорт
	
	ИнициализацияПервичныхПараметров("ИНКАССАЦИЯ");	
	ДанныеКассира = СтруктураКассира(ВходныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(ДанныеКассира) Тогда
		СохранитьВременноеЗначениеОборудования("ТекстОшибки", "НЕ ЗАПОЛНЕНА ИНФОРМАЦИ О КАССИРЕ");
		Возврат Ложь;
	КонецЕсли; 
		
	ДанныеСмены = ТекущиеДанныеСмены();
	Если ДанныеСмены = Неопределено Тогда
		СохранитьВременноеЗначениеОборудования("ТекстОшибки", "СМЕНА ЗАКРЫТА");
		Возврат Ложь;
	Иначе
		Если ДанныеСмены.ShiftState = 1 Тогда
			СохранитьВременноеЗначениеОборудования("ТекстОшибки", "СМЕНА ЗАКРЫТА");
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	ДанныеСмены.CheckNumber = ДанныеСмены.CheckNumber + 1;
	СохранитьТекущиеДанныеСмены(ДанныеСмены);
	Если пСумма > 0 Тогда 
		ВывестиДополнительныйЧек("ИНКАССАЦИЯ ВНЕСЕНИЕ", ДанныеКассира, пСумма);
	Иначе
		ВывестиДополнительныйЧек("ИНКАССАЦИЯ ВЫЕМКА", ДанныеКассира, -пСумма);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НапечататьОтчетБезГашения(ИДУстройства, ВходныеПараметры) Экспорт
	
	ИнициализацияПервичныхПараметров("ОТЧЕТ БЕЗ ГАШЕНИЯ");	
	ДанныеКассира = СтруктураКассира(ВходныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(ДанныеКассира) Тогда
		СохранитьВременноеЗначениеОборудования("ТекстОшибки", "НЕ ЗАПОЛНЕНА ИНФОРМАЦИ О КАССИРЕ");
		Возврат Ложь;
	КонецЕсли; 
	
	ДанныеСмены = ТекущиеДанныеСмены();
	Если ДанныеСмены = Неопределено Тогда
		СохранитьВременноеЗначениеОборудования("ТекстОшибки", "СМЕНА ЗАКРЫТА");
		Возврат Ложь;
	Иначе
		Если ДанныеСмены.ShiftState = 1 Тогда
			СохранитьВременноеЗначениеОборудования("ТекстОшибки", "СМЕНА ЗАКРЫТА");
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
	ДанныеСмены.CheckNumber = ДанныеСмены.CheckNumber + 1;
	СохранитьТекущиеДанныеСмены(ДанныеСмены);

	ВывестиДополнительныйЧек("X-ОТЧЕТ", ДанныеКассира);
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьЧек(ИДУстройства, Электронно, ДанныеЧека, ВыходныеПараметрыДокумента) Экспорт 
	
	ИнициализацияПервичныхПараметров("ЧЕК");	
	Возврат СформироватьИОтправитьЧек(ДанныеЧека, ВыходныеПараметрыДокумента, Электронно);
	
КонецФункции

Функция СформироватьЧекКоррекции(ИДУстройства, ДанныеЧека, ВыходныеПараметрыДокумента) Экспорт
	
	ИнициализацияПервичныхПараметров("ЧЕК КОРРЕКЦИИ");
	Возврат СформироватьИОтправитьЧек(ДанныеЧека, ВыходныеПараметрыДокумента, Ложь, Истина);	
	
КонецФункции

Функция СформироватьИОтправитьЧек(ДанныеЧека, ВыходныеПараметрыДокумента, Электронно, ЭтоЧекКоррекции = Ложь)
	
	ДанныеСмены = ТекущиеДанныеСмены();
	
	Если ДанныеСмены = Неопределено Тогда
		СохранитьВременноеЗначениеОборудования("ТекстОшибки", "СМЕНА ЗАКРЫТА");
		Возврат Ложь;		
	ИначеЕсли ДанныеСмены.ShiftState = 1 Тогда	
		СохранитьВременноеЗначениеОборудования("ТекстОшибки", "СМЕНА ЗАКРЫТА");
		Возврат Ложь;	
	КонецЕсли; 
	
	ПараметрыЧека1С = ЭмуляторKSOFT_ФормированиеЧека.ПараметрыЧека1С(ЭтоЧекКоррекции, ДанныеЧека);	
	Если ПараметрыЧека1С = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ПараметрыЧека = ЭмуляторKSOFT_ФормированиеЧека.СтруктураЧекаПоXML(ПараметрыЧека1С);
	ПараметрыЧека.Вставить("ЭтоЧекКоррекции", ЭтоЧекКоррекции);
	ДанныеСмены.CheckNumber = ДанныеСмены.CheckNumber + 1;
	ДанныеСмены.ShiftClosingCheckNumber = ДанныеСмены.ShiftClosingCheckNumber + 1;

	ФискальныеПараметрыТекущегоЧека = Новый Структура;
	ФискальныеПараметрыТекущегоЧека.Вставить("ДатаВремяЧека", ТекущаяДата());
	ФискальныеПараметрыТекущегоЧека.Вставить("ФНД", ДанныеСмены.CheckNumber);
	ФискальныеПараметрыТекущегоЧека.Вставить("ФП", Формат(ККТ_СлучайноеЧисло(10), "ЧГ="));
	
	ДанныеСмены.DateTime = ФискальныеПараметрыТекущегоЧека.ДатаВремяЧека;
	
	ПараметрыЧека.ФП		= ФискальныеПараметрыТекущегоЧека.ФП;
	ПараметрыЧека.ФНД		= ФискальныеПараметрыТекущегоЧека.ФНД;
	ПараметрыЧека.НомерЧека	= ДанныеСмены.ShiftClosingCheckNumber;
	ПараметрыЧека.Смена 	= ФорматЧислаЗаданногоРазмера(ДанныеСмены.ShiftNumber, 4);
	ПараметрыЧека.ДатаЧека 	= Формат(ФискальныеПараметрыТекущегоЧека.ДатаВремяЧека, "ДФ='dd.MM.yyyy   HH:mm'");	
	
	ТекстQRКода = ПолучитьТекстQRКода(ФискальныеПараметрыТекущегоЧека.ДатаВремяЧека, ПараметрыЧека.Итого, ПараметрыЧека.ЗаводскойНомерФН, ПараметрыЧека.ФНД, ПараметрыЧека.ФП, ПараметрыЧека1С.OperationType);	
	
	ПараметрыШтрихкода = ЭмуляторKSOFT_ФормированиеЧека.ПараметрыШтрихкодаПоУмолчанию();
	ПараметрыШтрихкода.Ширина = 300;
	ПараметрыШтрихкода.Высота = 300;
	ПараметрыШтрихкода.Штрихкод = ТекстQRКода;
	ПараметрыШтрихкода.УровеньКоррекцииQR = 3;
	ПараметрыШтрихкода.ТипКода = 16;
	ПараметрыШтрихкода.УбратьЛишнийФон = Истина;
	ПараметрыШтрихкода.ОтображатьТекст = Ложь;
	
	КартинкаШтрихкода = ЭмуляторKSOFT_ФормированиеЧека.КартинкаШтрихкода(ПараметрыШтрихкода);
		
	Если КартинкаШтрихкода <> Неопределено Тогда
		ПараметрыЧека.КартинкаQR = КартинкаШтрихкода;	
	КонецЕсли; 

	Для Каждого Элемент Из ПараметрыЧека.ТаблицаОплат Цикл
		Если Элемент.Оплата = "НАЛИЧНЫМИ" Тогда
			Если ПараметрыЧека1С.OperationType = 1 
				ИЛИ ПараметрыЧека1С.OperationType = 4 Тогда
				ДанныеСмены.CashBalance = ДанныеСмены.CashBalance + Элемент.Сумма;
			Иначе
				ДанныеСмены.CashBalance = Макс(ДанныеСмены.CashBalance - Элемент.Сумма, 0);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла; 
	
	Если ЭтоЧекКоррекции Тогда
		ДанныеСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].CorrectionCheckCount = ДанныеСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].CorrectionCheckCount + 1;
		ДанныеСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].TotalCorrectionChecksAmount = ДанныеСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].TotalCorrectionChecksAmount + ПараметрыЧека.Итого;
	Иначе
		ДанныеСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].CheckCount = ДанныеСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].CheckCount + 1;
		ДанныеСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].TotalChecksAmount = ДанныеСмены["CountersOperationType" + ПараметрыЧека1С.OperationType].TotalChecksAmount + ПараметрыЧека.Итого;
	КонецЕсли; 

	СохранитьТекущиеДанныеСмены(ДанныеСмены);
			
	ВывестиЧекНаФорму(ПараметрыЧека, ДанныеЧека);
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ShiftNumber", 				ДанныеСмены.ShiftNumber);
	ПараметрыДокумента.Вставить("CheckNumber", 				ДанныеСмены.CheckNumber);
	ПараметрыДокумента.Вставить("ShiftClosingCheckNumber", 	ДанныеСмены.ShiftClosingCheckNumber);
	ПараметрыДокумента.Вставить("AddressSiteInspections", 	ЭмуляторKSOFT_ФормированиеЧека.ТекущиеПараметрыККТ().FNSURL);
	ПараметрыДокумента.Вставить("FiscalSign",	 			Формат(ФискальныеПараметрыТекущегоЧека.ФП, "ЧГ="));
	ПараметрыДокумента.Вставить("DateTime", 				ФискальныеПараметрыТекущегоЧека.ДатаВремяЧека);

	ВыходныеПараметрыДокумента = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("DocumentOutputParameters.Parameters", ПараметрыДокумента);
	
	Возврат Истина;
	
КонецФункции 
	
Функция НапечататьТекстовыйДокумент(ИДУстройства, ДанныеДокумента) Экспорт
	
	ИнициализацияПервичныхПараметров("ПЕЧАТЬ ТЕКСТОВОГО ДОКУМЕНТА");
	
	ПараметрыЧека = ЭмуляторKSOFT_ФормированиеЧека.ДанныеТекстовогоДокумента(ДанныеДокумента);
	Если ПараметрыЧека = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 	
	
	ВывестиЧекНаФорму(ПараметрыЧека, ДанныеДокумента);
	
	Возврат Истина;
КонецФункции

Функция ПолучитьТекущееСостояние(ИДУстройства, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	ИнициализацияПервичныхПараметров("ПОЛУЧЕНИЕ ТЕКУЩЕГО СОСТОЯНИЯ");

	ДанныеСмены = ТекущиеДанныеСмены();
	Если ДанныеСмены = Неопределено Тогда
		ДанныеСмены = ПараметрыСостояниеСмены();
		ДанныеСмены.ShiftState = 1;
	КонецЕсли; 	
	
	ВыходныеПараметры = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("OutputParameters.Parameters", ДанныеСмены);
	
	Возврат Истина;	
	
КонецФункции
 
Функция ПолучитьДополнительныеДействия(ДополнительныеДействия) Экспорт
	ДополнительныеДействия = 
	"<?xml version=""1.0"" encoding=""windows-1251""?>
	|<Actions> 
	|	<Action Name=""Test"" Caption=""Тестовая операция""/>
	|</Actions>";	
КонецФункции

Функция ТестУстройства(Описание, АктивированДемоРежим) Экспорт 
	
	ИнициализацияПервичныхПараметров("ТЕСТ УСТРОЙСТВА");
	
	АктивированДемоРежим = "";
	РезультатЗапроса = Неопределено;
	Описание = "Успешное подключение.";
	Возврат Истина;
	
КонецФункции

Функция Подключить(пИДУстройства) Экспорт	
	
	ИнициализацияПервичныхПараметров("ПОДКЛЮЧЕНИЕ");
	ЭмуляторKSOFT_ФормированиеЧека.Подключить();
		
	пИДУстройства = 0;
	Возврат Истина;
	
КонецФункции

Функция Отключить(ИДУстройства) Экспорт
	
	ИнициализацияПервичныхПараметров("ОТКЛЮЧЕНИЕ");
	пИДУстройства = 0;
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОшибку(пИнформацияОбОшибке) Экспорт
	пИнформацияОбОшибке = ПолучитьВременноеЗначениеОборудования("ТекстОшибки");
	Возврат Истина;
КонецФункции

Функция ПолучитьОписание(ОписаниеДрайвера) Экспорт
	
	ПараметрыОписанияДрайвера = Новый Структура;
	ПараметрыОписанияДрайвера.Вставить("Name", "1C: Эмулятор контрольно-кассовой техники нового образца c функций эквайринговых операций");
	ПараметрыОписанияДрайвера.Вставить("Description", "1C: Эмулятор контрольно-кассовой техники нового образца c функций эквайринговых операций для подключения к ""1С:Предприятие""");
	ПараметрыОписанияДрайвера.Вставить("EquipmentType", "ККТ");
	ПараметрыОписанияДрайвера.Вставить("IntegrationComponent", Истина);
	ПараметрыОписанияДрайвера.Вставить("MainDriverInstalled", Истина);
	ПараметрыОписанияДрайвера.Вставить("DriverVersion", "1.06");
	ПараметрыОписанияДрайвера.Вставить("IntegrationComponentVersion", "1.06");	
	ПараметрыОписанияДрайвера.Вставить("DownloadURL", "");
	ПараметрыОписанияДрайвера.Вставить("LogIsEnabled", Ложь);
	ПараметрыОписанияДрайвера.Вставить("LogPath", "");
	
	ОписаниеДрайвера = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьXMLОтветНаОснованииСтруктуры("DriverDescription", ПараметрыОписанияДрайвера);		
	ТекстОшибки = "";
	Возврат Истина;
КонецФункции

Функция ОткрытьДенежныйЯщик(ИДУстройства) Экспорт
	
	ИнициализацияПервичныхПараметров("ОТКРЫТИЕ ДЕНЕЖНОГО ЯЩИКА");
	
	ВывестиДополнительныйЧек("ДЕНЕЖНЫЙ ЯЩИК ОТКРЫТ");
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьПараметры(ПараметрыДрайвера) Экспорт
	
	ПараметрыДрайвера = ЭмуляторKSOFT_ФормированиеЧека.ПроставитьЗначенияПоУмолчаниюПараметров();
	
КонецФункции

Функция ОтчетОТекущемСостоянииРасчетов(ИДУстройства, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	ИнициализацияПервичныхПараметров("ОТЧЕТ О СОСТОЯНИИ РАСЧЕТОВ");
	
	ДанныеКассира = СтруктураКассира(ВходныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(ДанныеКассира) Тогда
		СохранитьВременноеЗначениеОборудования("ТекстОшибки", "НЕ ЗАПОЛНЕНА ИНФОРМАЦИ О КАССИРЕ");
		Возврат Ложь;
	КонецЕсли; 
	
	ДанныеСмены = ТекущиеДанныеСмены();
	Если ДанныеСмены = Неопределено Тогда
		СохранитьВременноеЗначениеОборудования("ТекстОшибки", "СМЕНА ЗАКРЫТА");
		Возврат Ложь;
	Иначе
		Если ДанныеСмены.ShiftState = 1 Тогда
			СохранитьВременноеЗначениеОборудования("ТекстОшибки", "СМЕНА ЗАКРЫТА");
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 	
	
	ДанныеСмены.CheckNumber = ДанныеСмены.CheckNumber + 1;
	СохранитьТекущиеДанныеСмены(ДанныеСмены);

	ВывестиДополнительныйЧек("ТЕКУЩИЕ РАСЧЕТЫ", ДанныеКассира);
	
	Возврат Истина;	
	
КонецФункции

Функция УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) Экспорт
	ЭмуляторKSOFT_ФормированиеЧека.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра); 
	Возврат Истина;
КонецФункции

Функция ПолучитьШиринуСтроки(ИДУстройства, ШиринаСтроки) Экспорт
	
	ИнициализацияПервичныхПараметров("ПОЛУЧЕНИЕ ШИРИНЫ СТРОКИ");
	ШиринаСтроки = 32;	
	
	Возврат Истина;	
	
КонецФункции

Функция ОперацияФН(ИДУстройства, ТипОперации, ПараметрыФискализацииXML) Экспорт
	
	ИнициализацияПервичныхПараметров("ОПЕРАЦИЯ ФН");
	
	ЭмуляторKSOFT_ФормированиеЧека.ОперацияФН(ПараметрыФискализацииXML);
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьДополнительноеДействие(пИмяДействия) Экспорт
	Если ВРег(пИмяДействия) = "TEST" Тогда
		Возврат Истина;	
	КонецЕсли; 
	Возврат Ложь;
КонецФункции

Функция НапечататьКопиюЧека(ИДУстройства, НомерЧека) Экспорт
	
	ИнициализацияПервичныхПараметров("ПЕЧАТЬ КОПИИ ЧЕКА");
	СохранитьВременноеЗначениеОборудования("ТекстОшибки","Команда не поддерживается"); 
	
	Возврат Ложь;

КонецФункции

Функция НапечататьПоследнийЧек()
	
	ИнициализацияПервичныхПараметров("ПЕЧАТЬ ПОСЛЕДНЕГО ЧЕКА");
	СохранитьВременноеЗначениеОборудования("ТекстОшибки","Команда не поддерживается"); 
	
	Возврат Ложь;
	
КонецФункции

Функция СтруктураКассира(пПараметрыОперации)
	ДанныеКассира = ЭмуляторKSOFT_ФормированиеЧека.ПолучитьСтруктуруКассира(пПараметрыОперации);
	Если НЕ ЗначениеЗаполнено(ДанныеКассира.name) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Возврат ДанныеКассира;	
КонецФункции

//СТРУКТУРЫ

Функция ПараметрыСостояниеСмены()
	ПараметрыСостояниеСмены = Новый Структура;
	ПараметрыСостояниеСмены.Вставить("ShiftNumber", 0); //Номер открытой смены/Номер закрытой смены
	ПараметрыСостояниеСмены.Вставить("CheckNumber", 0); //Номер последнего фискального документа
	ПараметрыСостояниеСмены.Вставить("ShiftClosingCheckNumber", 0); //Номер последнего чека за смену
	ПараметрыСостояниеСмены.Вставить("DateTime", ""); //Сделано строкой, так как сразу будет передано в 1С в виде XML, Дата и время формирования фискального документа
	ПараметрыСостояниеСмены.Вставить("ShiftState", 1); //Состояние смены 1 - Закрыта 2 - Открыта 3 - Истекла
	ПараметрыСостояниеСмены.Вставить("CountersOperationType1", СчетчикЧековПоТипу()); //Счетчики операций по типу "приход" (код 1, Таблица 25 документа ФФД)
	ПараметрыСостояниеСмены.Вставить("CountersOperationType2", СчетчикЧековПоТипу()); //Счетчики операций по типу "возврат прихода" (код 2, Таблица 25 документа ФФД)
	ПараметрыСостояниеСмены.Вставить("CountersOperationType3", СчетчикЧековПоТипу()); //Счетчики операций по типу "расход" (код 3, Таблица 25 документа ФФД)
	ПараметрыСостояниеСмены.Вставить("CountersOperationType4", СчетчикЧековПоТипу()); //Счетчики операций по типу "возврат расхода"(код 4, Таблица 25 документа ФФД)
	ПараметрыСостояниеСмены.Вставить("CashBalance", 0.00); //Остаток наличных денежных средств в кассе
	
	ПараметрыСостояниеСмены.Вставить("BacklogDocumentsCounter", 0); //Количество непереданных документов
	ПараметрыСостояниеСмены.Вставить("BacklogDocumentFirstNumber", 0); //Номер первого непереданного документа
	ПараметрыСостояниеСмены.Вставить("BacklogDocumentFirstDateTime", '00010101'); //Дата и время первого из непереданных документов
	
	ПараметрыСостояниеСмены.Вставить("FNError", Ложь); //Необходимо заменить фн
	ПараметрыСостояниеСмены.Вставить("FNOverflow", Ложь); //Признак переполнения памяти ФН
	ПараметрыСостояниеСмены.Вставить("FNFail", Ложь); //Признак исчерпания ресурса ФН
	Возврат ПараметрыСостояниеСмены;
КонецФункции

Функция СчетчикЧековПоТипу()
	СчетчикЧековПоТипу = Новый Структура;
	СчетчикЧековПоТипу.Вставить("CheckCount", 0); //	Количество чеков по операции данного типа
	СчетчикЧековПоТипу.Вставить("TotalChecksAmount", 0.00); //Итоговая сумма чеков по операциям данного типа
	СчетчикЧековПоТипу.Вставить("CorrectionCheckCount", 0); //Количество чеков коррекции по операции данного типа
	СчетчикЧековПоТипу.Вставить("TotalCorrectionChecksAmount", 0.00); //Итоговая сумма чеков коррекции по операциям данного типа
	Возврат СчетчикЧековПоТипу;
КонецФункции

Функция ТекущиеДанныеСмены()
	Возврат ПолучитьВременноеЗначениеОборудования("ДанныеСмены");	
КонецФункции

Процедура СохранитьТекущиеДанныеСмены(ПараметрыСостояниеСмены)
	СохранитьВременноеЗначениеОборудования("ДанныеСмены", ПараметрыСостояниеСмены);
КонецПроцедуры
 
Процедура ВывестиДополнительныйЧек(ТипОперации, ДанныеКассира = Неопределено, Сумма = 0)
	
	ПараметрыДрайвера = ПолучитьВременноеЗначениеОборудования("ПараметрыДрайвера");

	Если НЕ ПараметрыДрайвера.Свойство("WindowShowType") ИЛИ ПараметрыДрайвера.WindowShowType = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДопЧека = Новый Структура;
	ПараметрыДопЧека.Вставить("Интервал", ИнтервалОтображенияЧека(ПараметрыДрайвера));
	ПараметрыДопЧека.Вставить("ДокументЧекККМ", ЭмуляторKSOFT_ФормированиеЧека.ТекстовыйДокументЧек(ДанныеКассира, ТипОперации, Сумма));
	
	Если ПараметрыДрайвера.Свойство("TypeOpenWindow") И ПараметрыДрайвера.TypeOpenWindow = 1 Тогда
		ОткрытьФорму("ОбщаяФорма.ЭмуляторKSOFT_ДополнительныйЧек", ПараметрыДопЧека,,,,,,РежимОткрытияОкнаФормы.Независимый);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ЭмуляторKSOFT_ДополнительныйЧек", ПараметрыДопЧека,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 			
		
КонецПроцедуры

Функция ИнтервалОтображенияЧека(ПараметрыДрайвера)
	
	Если ПараметрыДрайвера.WindowShowType = 1 Тогда
		Возврат 0;
	ИначеЕсли ПараметрыДрайвера.WindowShowType = 2 Тогда 
		Возврат 5;
	ИначеЕсли ПараметрыДрайвера.WindowShowType = 3 Тогда 
		Возврат 15;
	ИначеЕсли ПараметрыДрайвера.WindowShowType = 4 Тогда 
		Возврат 30;
	ИначеЕсли ПараметрыДрайвера.WindowShowType = 5 Тогда 
		Возврат 60;
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции


//НЕФИСКАЛЬНФЙ ЧЕК

Процедура ВывестиЧекНаФорму(ДанныеЧекаДляПечати, XMLПредварительныйЧек)
	
	ПараметрыДрайвера = ПолучитьВременноеЗначениеОборудования("ПараметрыДрайвера");
	
	Если НЕ ПараметрыДрайвера.Свойство("WindowShowType") ИЛИ ПараметрыДрайвера.WindowShowType = 0 Тогда
		Возврат;
	КонецЕсли;

	ПредварительныйЧек = ЭмуляторKSOFT_ФормированиеЧека.РаспечататьПредварительныйЧек(ДанныеЧекаДляПечати);
	Если ПредварительныйЧек = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыДопЧека = Новый Структура("ПредварительныйЧек, XMLПредварительныйЧек, Интервал", 
	ПредварительныйЧек, XMLПредварительныйЧек, ИнтервалОтображенияЧека(ПараметрыДрайвера));
	
	Если ПараметрыДрайвера.Свойство("TypeOpenWindow") И ПараметрыДрайвера.TypeOpenWindow = 1 Тогда
		ОткрытьФорму("ОбщаяФорма.ЭмуляторKSOFT_Чек", ПараметрыДопЧека,,,,,,РежимОткрытияОкнаФормы.Независимый);
	Иначе
		ОткрытьФорму("ОбщаяФорма.ЭмуляторKSOFT_Чек", ПараметрыДопЧека,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 								
	
КонецПроцедуры

Функция ФорматЧисла(пЧисло, БезДробей = Ложь)
	Если БезДробей Тогда
		Возврат Формат(пЧисло, "ЧДЦ=2; ЧРД=.; ЧГ=");	 	
	Иначе
		Возврат Формат(пЧисло, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=");	
	КонецЕсли; 
КонецФункции

Функция ПолучитьТекстQRКода(пДатаЧека, пСумма, пФН, пФНД, пФП, пТипРасчета)
	ДанныеQRКода 		= "t=%D%&s=%S%&fn=%F%&i=%I%&fp=%P%&n=%T%";
	// Формирование QR кода.
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%D%", Формат(пДатаЧека, "ДФ=yyyyMMddTHHmm"));
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%S%", ФорматЧисла(пСумма));
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%F%", пФН);
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%I%", ФорматЧислаЗаданногоРазмера(пФНД, 4));
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%P%", пФП);
	ДанныеQRКода = СтрЗаменить(ДанныеQRКода, "%T%", пТипРасчета);	
	Возврат ДанныеQRКода;
КонецФункции

Функция ФорматЧислаЗаданногоРазмера(ЧислоДляФорматирования, ЗаданныйРазмер = 0)
	ОтформатированноеЧисло = Формат(ЧислоДляФорматирования, "ЧВН=; ЧГ=");
	Если ЗначениеЗаполнено(ЗаданныйРазмер) И СтрДлина(ОтформатированноеЧисло) < ЗаданныйРазмер Тогда 	
		Возврат Формат(ЧислоДляФорматирования, СтрШаблон("ЧЦ=%1; ЧВН=; ЧГ=", ФорматЧислаЗаданногоРазмера(ЗаданныйРазмер)));
	КонецЕсли; 
	Возврат ОтформатированноеЧисло;
КонецФункции

Функция ККТ_СлучайноеЧисло(пДлинаЧисла = 1)
	лГенератор = Новый ГенераторСлучайныхЧисел();
	Если пДлинаЧисла = 1 Тогда
		Возврат лГенератор.СлучайноеЧисло(0, 9);	
	КонецЕсли; 
	ИтоговоеСлучайноеЧисло = ""; 
	Для Сч = 1 По пДлинаЧисла Цикл
		Если Сч = 1 Тогда
			ИтоговоеСлучайноеЧисло = ИтоговоеСлучайноеЧисло + Строка(лГенератор.СлучайноеЧисло(1, 9));
		Иначе
			ИтоговоеСлучайноеЧисло = ИтоговоеСлучайноеЧисло + Строка(лГенератор.СлучайноеЧисло(0, 9));
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Число(ИтоговоеСлучайноеЧисло);		
КонецФункции

Функция ПараметрыТекстовойСтрокиЧека(Текст = Неопределено, пПереносСтроки = Истина, пВыравнивание = "ЛЕВО") 
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ТекстоваяСтрока"); 
	ПараметрыСтроки.Вставить("Текст", Текст); 
	ПараметрыСтроки.Вставить("ПереносСтроки", пПереносСтроки);   // Булево - Перенос строки, устанавливается значение по умочанию.  
	ПараметрыСтроки.Вставить("Выравнивание" , пВыравнивание); // Строка - Выравнивание текста, Значения: "Лево", "Право", "Центр".
	Возврат ПараметрыСтроки; 
	
КонецФункции

Процедура СохранитьВременноеЗначениеОборудования(ИмяПараметра, ЗначениеПараметра)
	ЭмуляторKSOFT_ОбщегоНазначения.СохранитьВременноеЗначениеОборудования(ИмяПараметра, ЗначениеПараметра);
КонецПроцедуры
 
Функция ПолучитьВременноеЗначениеОборудования(ИмяПараметра)
	Возврат ЭмуляторKSOFT_ОбщегоНазначения.ПолучитьВременноеЗначениеОборудования(ИмяПараметра);
КонецФункции
 
////НЕФИСКАЛЬНЫЙ ЧЕК

Процедура ИнициализацияПервичныхПараметров(ИмяОперации)
	СохранитьВременноеЗначениеОборудования("ИмяОперации", ИмяОперации);
	СохранитьВременноеЗначениеОборудования("ТекстОшибки", "");
КонецПроцедуры
 